{
  "animations": {
    "name": "animations",
    "brief": "Animations in SplashKit can be used to move between cells in\nbitmaps and sprites. Each animation generates a number sequence\nthat can then be used when drawing bitmaps.",
    "description": null,
    "functions": [
      {
        "signature": "int animation_count(animation_script script);",
        "name": "animation_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of `animation`s within an `animation_script`.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns an `int` equal to the total number of animations in the script."
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "Returns the number of `animation`s within an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation_script",
          "getter": "animation_count",
          "self": "script",
          "static": "animation"
        }
      },
      {
        "signature": "int animation_current_cell(animation anim);",
        "name": "animation_current_cell",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current cell (the part of the image or sprite) of this\nanimation. This can be used to animate an image or sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the current cell of the animation passed to the method."
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Returns the current cell (the part of the image or sprite) of this\nanimation. This can be used to animate an image or sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "current_cell",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "vector_2d animation_current_vector(animation anim);",
        "name": "animation_current_vector",
        "method_name": "current_vector",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `vector_2d` assigned to the current frame in the animation.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `vector_2d` assigned to the current frame in the animation."
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Returns the `vector_2d` assigned to the current frame in the animation.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "current_vector",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "bool animation_ended(animation anim);",
        "name": "animation_ended",
        "method_name": "ended",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if an `animation` has ended.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `bool` denoting whether the `animation` has ended."
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Checks if an `animation` has ended.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "ended",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "bool animation_entered_frame(animation anim);",
        "name": "animation_entered_frame",
        "method_name": "entered_frame",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the `animation` entered a new frame on its last update.\nThis can be used to trigger actions on frames within an animation.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `bool` denoting whether the `animation` has ended."
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Returns true if the `animation` entered a new frame on its last update.\nThis can be used to trigger actions on frames within an animation.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "entered_frame",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "float animation_frame_time(animation anim);",
        "name": "animation_frame_time",
        "method_name": "frame_time",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the amount of time spent in the current frame. When this\nexceeds the frames duration the animation moves to the next frame.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the amount of time spent in the current frame as a `float`."
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Returns the amount of time spent in the current frame. When this\nexceeds the frames duration the animation moves to the next frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "frame_time",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "int animation_index(animation_script script,string name);",
        "name": "animation_index",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Searches an `animation_script` for an `animation` and returns its\nindex.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the index of the `animation` in the `animation_script`"
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "Searches an `animation_script` for an `animation` and returns its\nindex.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Searches an `animation_script` for an `animation` and returns its\nindex.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation_script",
          "getter": "animation_index",
          "self": "script",
          "static": "animation"
        }
      },
      {
        "signature": "string animation_name(animation temp);",
        "name": "animation_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Searches an `animation_script` for an animation and returns its name.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the name of the `animation` in the `animation_script`."
        },
        "parameters": {
          "temp": {
            "type": "animation",
            "description": "Searches an `animation_script` for an animation and returns its name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "name",
          "self": "temp",
          "static": "animation"
        }
      },
      {
        "signature": "string animation_script_name(animation_script script);",
        "name": "animation_script_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retuns the name of an `animation_script`.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `string` that is the name of the animation script passed to the method."
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "Retuns the name of an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "animation"
        }
      },
      {
        "signature": "animation_script animation_script_named(string name);",
        "name": "animation_script_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads and returns a `animation_script`. The supplied filename is\nused to locate the `animation_script` to load. The supplied name\nindicates the name to use to refer to this in SplashKit. The\n`animation_script` can then be retrieved by passing this name to\nthe animation_script_named method.",
        "brief": null,
        "return": {
          "type": "animation_script",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the newly loaded `animation_script`."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Loads and returns a `animation_script`. The supplied filename is\nused to locate the `animation_script` to load. The supplied name\nindicates the name to use to refer to this in SplashKit. The\n`animation_script` can then be retrieved by passing this name to\nthe animation_script_named method.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "animation"
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,int idx);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Assigns an `animation` to an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "script": {
            "type": "animation_script",
            "description": "Assigns an `animation` to an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Assigns an `animation` to an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,int idx,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "script": {
            "type": "animation_script",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,string name);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Assigns an `animation` to an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "script": {
            "type": "animation_script",
            "description": "Assigns an `animation` to an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Assigns an `animation` to an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,string name,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "script": {
            "type": "animation_script",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "void assign_animation(animation anim,string script_name,string name);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Assigns an `animation` to an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "script_name": {
            "type": "string",
            "description": "Assigns an `animation` to an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Assigns an `animation` to an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "void assign_animation(animation anim,string script_name,string name,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "script_name": {
            "type": "string",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "animation create_animation(animation_script script,int idx,bool with_sound);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the newly created `animation_script`."
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "Creates an animation from an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Creates an animation from an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Creates an animation from an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "animation"
        }
      },
      {
        "signature": "animation create_animation(animation_script script,string name);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`.",
        "brief": null,
        "return": {
          "type": "animation",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the newly created `animation`"
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "Creates an animation from an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Creates an animation from an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "static": "animation"
        }
      },
      {
        "signature": "animation create_animation(animation_script script,string name,bool with_sound);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from a `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on\nits first frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the newly created `animation`."
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "Creates an animation from a `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on\nits first frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Creates an animation from a `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on\nits first frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Creates an animation from a `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on\nits first frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "self": "script",
          "static": "animation"
        }
      },
      {
        "signature": "animation create_animation(string script_name,int idx);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`.",
        "brief": null,
        "return": {
          "type": "animation",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the newly created `animation_script`."
        },
        "parameters": {
          "script_name": {
            "type": "string",
            "description": "Creates an animation from an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Creates an animation from an `animation_script`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "animation"
        }
      },
      {
        "signature": "animation create_animation(string script_name,string name);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the newly created `animation`"
        },
        "parameters": {
          "script_name": {
            "type": "string",
            "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "static": "animation"
        }
      },
      {
        "signature": "animation create_animation(string script_name,string name,bool with_sound);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the newly created `animation`"
        },
        "parameters": {
          "script_name": {
            "type": "string",
            "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "static": "animation"
        }
      },
      {
        "signature": "void free_all_animation_scripts();",
        "name": "free_all_animation_scripts",
        "method_name": "free_all",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees all loaded `animation_script`s.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "animation",
          "method": "free_all",
          "static": "animation"
        }
      },
      {
        "signature": "void free_animation(animation ani);",
        "name": "free_animation",
        "method_name": "free",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Disposes of the resources used in the animation.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "ani": {
            "type": "animation",
            "description": "Disposes of the resources used in the animation.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "destructor": true,
          "method": "free",
          "self": "ani",
          "static": "animation"
        }
      },
      {
        "signature": "void free_animation_script(animation_script script_to_free);",
        "name": "free_animation_script",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees loaded animation frames data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "script_to_free": {
            "type": "animation_script",
            "description": "Frees loaded animation frames data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation_script",
          "destructor": true,
          "self": "script_to_free",
          "static": "animation"
        }
      },
      {
        "signature": "void free_animation_script(string name);",
        "name": "free_animation_script",
        "method_name": "free",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees loaded `animation_script` data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Frees loaded `animation_script` data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation_script",
          "method": "free",
          "static": "animation"
        }
      },
      {
        "signature": "bool has_animation_named(animation_script script,string name);",
        "name": "has_animation_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns whether an `animation_script` has been loaded with the\ngiven name.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `bool` that denotes whether the `animation_script` has been loaded."
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "Returns whether an `animation_script` has been loaded with the\ngiven name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Returns whether an `animation_script` has been loaded with the\ngiven name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "animation"
        }
      },
      {
        "signature": "bool has_animation_script(string name);",
        "name": "has_animation_script",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has animation frames loaded for the\nsupplied name. This checks against all loaded animation frames,\nthose loaded without a name are assigned the filename as a default.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `bool` that denotes if the animation has the `animation_script`"
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Determines if SplashKit has animation frames loaded for the\nsupplied name. This checks against all loaded animation frames,\nthose loaded without a name are assigned the filename as a default.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "animation"
        }
      },
      {
        "signature": "animation_script load_animation_script(string name,string filename);",
        "name": "load_animation_script",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Load animation details from an animation frames file.",
        "brief": null,
        "return": {
          "type": "animation_script",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the newly loaded `animation_script`."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Load animation details from an animation frames file.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "filename": {
            "type": "string",
            "description": "Load animation details from an animation frames file.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "static": "animation"
        }
      },
      {
        "signature": "void restart_animation(animation anim);",
        "name": "restart_animation",
        "method_name": "restart",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Restarts an `animation`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Restarts an `animation`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "restart",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "void restart_animation(animation anim,bool with_sound);",
        "name": "restart_animation",
        "method_name": "restart",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Restarts an `animation`. This may play a sound effect if the first\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Restarts an `animation`. This may play a sound effect if the first\nframe triggers a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Restarts an `animation`. This may play a sound effect if the first\nframe triggers a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "restart",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "void update_animation(animation anim,float pct,bool with_sound);",
        "name": "update_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pct": {
            "type": "float",
            "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "animation"
        }
      },
      {
        "signature": "void update_animation(animation anim);",
        "name": "update_animation",
        "method_name": "update",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "update",
          "self": "anim",
          "static": "animation"
        }
      },
      {
        "signature": "void update_animation(animation anim,float pct);",
        "name": "update_animation",
        "method_name": "update",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pct": {
            "type": "float",
            "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "animation",
          "method": "update",
          "self": "anim",
          "static": "animation"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "audio": {
    "name": "audio",
    "brief": "SplashKit Audio allows you to load and play music and sound effects.",
    "description": "The SplashKit's audio library allows you to easily load and play music and\nsound effects within your programs. To get started with audio the first\nthing you need to do is load a sound effect or music file. You can do this\nby calling the `load_sound_effect(string name)` function to the\n`load_music(string name)` function.",
    "functions": [
      {
        "signature": "bool audio_ready();",
        "name": "audio_ready",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if SplashKit audio currently ready to be used.\n\nShould this return `false`, you may want to use `open_audio`\nto enable audio.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns `true` if the audio has been initalised."
        },
        "parameters": {
        },
        "attributes": {
          "getter": "is_ready",
          "static": "audio"
        }
      },
      {
        "signature": "void close_audio();",
        "name": "close_audio",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Turns off audio, stopping all current sounds effects and music.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void open_audio();",
        "name": "open_audio",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the SplashKit audio system working.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "static": "audio"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "bundles": {
    "name": "bundles",
    "brief": "SplashKit resource bundles allow you to quickly and easily load a\nnumber of resources.",
    "description": "Supports the loading and freeing of game resource bundles. Resource types\ninclude images, sounds, music and animation files to name a few. Resource\nfiles must be saved in specific locations of a **Resources** folder for\nyour game.",
    "functions": [
      {
        "signature": "void free_resource_bundle(const string name);",
        "name": "free_resource_bundle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "When you are finished with the resources in a bundle, you can free them all\nby calling this procedure. It will free the resource bundle and all of the\nassociated resources.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "When you are finished with the resources in a bundle, you can free them all\nby calling this procedure. It will free the resource bundle and all of the\nassociated resources.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "resource_bundle"
        }
      },
      {
        "signature": "bool has_resource_bundle(const string &name);",
        "name": "has_resource_bundle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the named resource bundle has already been loaded.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True when the bundle is already loaded."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Returns true when the named resource bundle has already been loaded.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "resource_bundle"
        }
      },
      {
        "signature": "void load_resource_bundle(const string &name,const string &filename);",
        "name": "load_resource_bundle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads all of the resources in the resource bundle. The resource bundle is a\ntext file that describes the resources you want to load. These rescources\nare then loaded when you call this procedure, and can all be released when\nyou call `release_resource_bundle`.\n\nSave the resource bundle text files into your projects **Resources** in the\n**bundles** folder. Use the following as the format for each of the\nresources.\n\nStart a line with a // to have it ignored when the bundle is loaded. This\ncan be used to add comments to your bundle.\n\n\n-  To load an **animation** use the format: ANIM,name,filename. For example, the\nfollowing will load an animation named \"WalkingScript\" that loads the\nanimation from \"kermit.txt\" in your games animation Resources.\n\nANIM,WalkingScript,kermit.txt\n\n-  To load a **bitmap** use the format: BMP,name,filename. For example, the\nfollowing will load a bitmap named \"Logo\" using the \"Logo.png\" file.\n\nBITMAP,Logo,logo.png\n\n-  To load a **bitmap** that has a number of cells, you can extend the\nbitmap format with the cell details. This has the format:\nBMP,name,filename,cell-width,cell-height,columns,rows,count. The following\nwill setup the \"Player\" bitmap to have cells that are 75 pixels wide, and\n42 pixels height. There are 4 columns in 1 row, giving a total of 4 cells.\n\nBITMAP,Player,player.png,75,42,4,1,4\n\n-  To load a font use FONT,name,filename. For example, the following loads a\nfont named \"GameFont\" that represents the \"demolition.otf\".\n\nFONT,GameFont,demolition.otf\n\n-  To load music, use MUSIC,name,filename. The following loads \"GameMusic\"\nfor the \"magical_night.ogg\" file.\n\nMUSIC,GameMusic,magical_night.ogg\n\n-  To load a sound effect, use SOUND,name,filename. For example the following\nloads \"error\" from the \"error.wav\" file.\n\nSOUND,error,error.wav\n\n-  To create a timer use TIMER,name. The following creates a timer named as\n\"my timer\".\n\nTIMER,my timer\n\n-  You can also load another resource bundle using BUNDLE,name,filename.\nThe following loads \"another bundle\" from the \"another.txt\" file.\n\nBUNDLE,another bundle,another.txt",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Loads all of the resources in the resource bundle. The resource bundle is a\ntext file that describes the resources you want to load. These rescources\nare then loaded when you call this procedure, and can all be released when\nyou call `release_resource_bundle`.\n\nSave the resource bundle text files into your projects **Resources** in the\n**bundles** folder. Use the following as the format for each of the\nresources.\n\nStart a line with a // to have it ignored when the bundle is loaded. This\ncan be used to add comments to your bundle.\n\n\n-  To load an **animation** use the format: ANIM,name,filename. For example, the\nfollowing will load an animation named \"WalkingScript\" that loads the\nanimation from \"kermit.txt\" in your games animation Resources.\n\nANIM,WalkingScript,kermit.txt\n\n-  To load a **bitmap** use the format: BMP,name,filename. For example, the\nfollowing will load a bitmap named \"Logo\" using the \"Logo.png\" file.\n\nBITMAP,Logo,logo.png\n\n-  To load a **bitmap** that has a number of cells, you can extend the\nbitmap format with the cell details. This has the format:\nBMP,name,filename,cell-width,cell-height,columns,rows,count. The following\nwill setup the \"Player\" bitmap to have cells that are 75 pixels wide, and\n42 pixels height. There are 4 columns in 1 row, giving a total of 4 cells.\n\nBITMAP,Player,player.png,75,42,4,1,4\n\n-  To load a font use FONT,name,filename. For example, the following loads a\nfont named \"GameFont\" that represents the \"demolition.otf\".\n\nFONT,GameFont,demolition.otf\n\n-  To load music, use MUSIC,name,filename. The following loads \"GameMusic\"\nfor the \"magical_night.ogg\" file.\n\nMUSIC,GameMusic,magical_night.ogg\n\n-  To load a sound effect, use SOUND,name,filename. For example the following\nloads \"error\" from the \"error.wav\" file.\n\nSOUND,error,error.wav\n\n-  To create a timer use TIMER,name. The following creates a timer named as\n\"my timer\".\n\nTIMER,my timer\n\n-  You can also load another resource bundle using BUNDLE,name,filename.\nThe following loads \"another bundle\" from the \"another.txt\" file.\n\nBUNDLE,another bundle,another.txt",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "filename": {
            "type": "string",
            "description": "Loads all of the resources in the resource bundle. The resource bundle is a\ntext file that describes the resources you want to load. These rescources\nare then loaded when you call this procedure, and can all be released when\nyou call `release_resource_bundle`.\n\nSave the resource bundle text files into your projects **Resources** in the\n**bundles** folder. Use the following as the format for each of the\nresources.\n\nStart a line with a // to have it ignored when the bundle is loaded. This\ncan be used to add comments to your bundle.\n\n\n-  To load an **animation** use the format: ANIM,name,filename. For example, the\nfollowing will load an animation named \"WalkingScript\" that loads the\nanimation from \"kermit.txt\" in your games animation Resources.\n\nANIM,WalkingScript,kermit.txt\n\n-  To load a **bitmap** use the format: BMP,name,filename. For example, the\nfollowing will load a bitmap named \"Logo\" using the \"Logo.png\" file.\n\nBITMAP,Logo,logo.png\n\n-  To load a **bitmap** that has a number of cells, you can extend the\nbitmap format with the cell details. This has the format:\nBMP,name,filename,cell-width,cell-height,columns,rows,count. The following\nwill setup the \"Player\" bitmap to have cells that are 75 pixels wide, and\n42 pixels height. There are 4 columns in 1 row, giving a total of 4 cells.\n\nBITMAP,Player,player.png,75,42,4,1,4\n\n-  To load a font use FONT,name,filename. For example, the following loads a\nfont named \"GameFont\" that represents the \"demolition.otf\".\n\nFONT,GameFont,demolition.otf\n\n-  To load music, use MUSIC,name,filename. The following loads \"GameMusic\"\nfor the \"magical_night.ogg\" file.\n\nMUSIC,GameMusic,magical_night.ogg\n\n-  To load a sound effect, use SOUND,name,filename. For example the following\nloads \"error\" from the \"error.wav\" file.\n\nSOUND,error,error.wav\n\n-  To create a timer use TIMER,name. The following creates a timer named as\n\"my timer\".\n\nTIMER,my timer\n\n-  You can also load another resource bundle using BUNDLE,name,filename.\nThe following loads \"another bundle\" from the \"another.txt\" file.\n\nBUNDLE,another bundle,another.txt",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "resource_bundle"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "camera": {
    "name": "camera",
    "brief": "SplashKit camera functionality allows you to move a virtual camera\naround in your world.",
    "description": "Splashkit camera functionality allows you to move a virtual camera around in\nyour world. This camera projects to the users window, allowing you to\ndraw things to the screen in your world coordinates.",
    "functions": [
      {
        "signature": "point_2d camera_position();",
        "name": "camera_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the position of the camera in game coordinates. This will be the\ncoordinate of the upper left corner of the screen.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The position of the camera as a point_2d."
        },
        "parameters": {
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "float camera_x();",
        "name": "camera_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the x location of the camera in game coordinates. This represents\nthe left most x value shown on the screen, with the right of the screen\nbeing at camera x + screen width.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The x location of the camera in game coordinates."
        },
        "parameters": {
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "float camera_y();",
        "name": "camera_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the y location of the camera in game coordinates. This represents\nthe stop most y value shown on the screen, with bottom of screen being\nat camera y + screen height.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The y location of the camera in game coordinates."
        },
        "parameters": {
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "void center_camera_on(sprite s,const vector_2d &offset);",
        "name": "center_camera_on",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "offset": {
            "type": "vector_2d",
            "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "void center_camera_on(sprite s,float offset_x,float offset_y);",
        "name": "center_camera_on",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "offset_x": {
            "type": "float",
            "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "offset_y": {
            "type": "float",
            "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "void move_camera_by(const vector_2d &offset);",
        "name": "move_camera_by",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the camera (offset its world x and y values) using the specified\nvector. For example, if you move the camera by the same speed vector of\na sprite the camera will \"track\" (be locked on to) the sprite as it moves.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "offset": {
            "type": "vector_2d",
            "description": "Move the camera (offset its world x and y values) using the specified\nvector. For example, if you move the camera by the same speed vector of\na sprite the camera will \"track\" (be locked on to) the sprite as it moves.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "void move_camera_by(float dx,float dy);",
        "name": "move_camera_by",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the camera (offset its world x and y values) using the specified\ndx (change in x) and dy (change in x) values.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "dx": {
            "type": "float",
            "description": "Move the camera (offset its world x and y values) using the specified\ndx (change in x) and dy (change in x) values.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "dy": {
            "type": "float",
            "description": "Move the camera (offset its world x and y values) using the specified\ndx (change in x) and dy (change in x) values.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "void move_camera_to(const point_2d &pt);",
        "name": "move_camera_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the camera view (screen top left) to a specified point in the world.\nThis will be the new top left corner of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Move the camera view (screen top left) to a specified point in the world.\nThis will be the new top left corner of the screen.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "void move_camera_to(float x,float y);",
        "name": "move_camera_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the camera view to a world location specified by the x and y values.\nThis will be the new top left corner of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "Move the camera view to a world location specified by the x and y values.\nThis will be the new top left corner of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Move the camera view to a world location specified by the x and y values.\nThis will be the new top left corner of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "bool point_on_screen(const point_2d &pt);",
        "name": "point_on_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if the point is on the screen.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if the point is on the screen."
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Tests if the point is on the screen.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "bool rect_on_screen(const rectangle &rect);",
        "name": "rect_on_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if the rectangle is on the screen.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if any part of the rectangle is on the screen."
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "Tests if the rectangle is on the screen.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "point_2d screen_center();",
        "name": "screen_center",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center of the screen in world coordinates.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The center of the screen in world coordinates."
        },
        "parameters": {
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "rectangle screen_rectangle();",
        "name": "screen_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that represents the dimensions of the window.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A rectangle representing the dimensions of the current window."
        },
        "parameters": {
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "void set_camera_position(point_2d pos);",
        "name": "set_camera_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the position of the camera to a specified world coordinate. This\nwill then be the new top left most position of the screen within the world.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pos": {
            "type": "point_2d",
            "description": "Change the position of the camera to a specified world coordinate. This\nwill then be the new top left most position of the screen within the world.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "void set_camera_y(float y);",
        "name": "set_camera_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the Y position of the camera to a specified world coordinate. This\nwill then be the new top most position of the screen within the world.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "y": {
            "type": "float",
            "description": "Change the Y position of the camera to a specified world coordinate. This\nwill then be the new top most position of the screen within the world.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "point_2d to_screen(const point_2d &pt);",
        "name": "to_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Convert the passed in world coordinates to screen coordinates.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A point that represents pt in screen coordinates."
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Convert the passed in world coordinates to screen coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "rectangle to_screen(const rectangle &rect);",
        "name": "to_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Convert the rectangle in world coordinates to screen coordinates.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A rectangle that represents rect in screen coordinates."
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "Convert the rectangle in world coordinates to screen coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "float to_screen_x(float world_x);",
        "name": "to_screen_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Translate a world x value to the current screen x value which is based on\nthe camera position.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The x location of the world coordinate on the screen."
        },
        "parameters": {
          "world_x": {
            "type": "float",
            "description": "Translate a world x value to the current screen x value which is based on\nthe camera position.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "float to_screen_y(float world_y);",
        "name": "to_screen_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Translate a world y value to the current screen y value set by the camera.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The y location of the world coordinate on the screen."
        },
        "parameters": {
          "world_y": {
            "type": "float",
            "description": "Translate a world y value to the current screen y value set by the camera.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "point_2d to_world(const point_2d &pt);",
        "name": "to_world",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts the passed in point from screen coordinates to world coordinates.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The same point in world coordinates."
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Converts the passed in point from screen coordinates to world coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "float to_world_x(float screen_x);",
        "name": "to_world_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Translate a screen x value (based on the camera) to a world x value",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The x location of the screen coordinate in the world."
        },
        "parameters": {
          "screen_x": {
            "type": "float",
            "description": "Translate a screen x value (based on the camera) to a world x value",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "float to_world_y(float screen_y);",
        "name": "to_world_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Translate a screen y value (based on the camera) to a world y value",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The y location of the screen coordinate in the world."
        },
        "parameters": {
          "screen_y": {
            "type": "float",
            "description": "Translate a screen y value (based on the camera) to a world y value",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "camera"
        }
      },
      {
        "signature": "vector_2d vector_world_to_screen();",
        "name": "vector_world_to_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that can transform points from world to screen coordinates.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A vector representing the distance and direction points need\nto move to map from world to screen coordinates."
        },
        "parameters": {
        },
        "attributes": {
          "static": "camera"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "circle_drawing": {
    "name": "circle_drawing",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "void draw_circle(color clr,const circle &c);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "c": {
            "type": "circle",
            "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void draw_circle(color clr,const circle &c,drawing_options opts);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "Draw a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "c": {
            "type": "circle",
            "description": "Draw a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "opts": {
            "type": "drawing_options",
            "description": "Draw a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void draw_circle(color clr,float x,float y,float radius);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "Draw a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Draw a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Draw a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "radius": {
            "type": "float",
            "description": "Draw a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void draw_circle(color clr,float x,float y,float radius,drawing_options opts);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "radius": {
            "type": "float",
            "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "opts": {
            "type": "drawing_options",
            "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void fill_circle(color clr,const circle &c);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "c": {
            "type": "circle",
            "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void fill_circle(color clr,const circle &c,drawing_options opts);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "Fill a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "c": {
            "type": "circle",
            "description": "Fill a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "opts": {
            "type": "drawing_options",
            "description": "Fill a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void fill_circle(color clr,float x,float y,float radius);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "Fill a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Fill a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Fill a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "radius": {
            "type": "float",
            "description": "Fill a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void fill_circle(color clr,float x,float y,float radius,drawing_options opts);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "radius": {
            "type": "float",
            "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "opts": {
            "type": "drawing_options",
            "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "circle_geometry": {
    "name": "circle_geometry",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "point_2d center_point(const circle &c);",
        "name": "center_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of the circle.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "Returns the center point of the circle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool circles_intersect(circle c1,circle c2);",
        "name": "circles_intersect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if the two circles do intersect"
        },
        "parameters": {
          "c1": {
            "type": "circle",
            "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "c2": {
            "type": "circle",
            "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "clipping": {
    "name": "clipping",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "collisions": {
    "name": "collisions",
    "brief": "SplashKit Collisions library allow you to perform tests between\nbitmaps, sprites and shapes to determin if a collision has occured.",
    "description": null,
    "functions": [
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,const matrix_2d& translation,const point_2d& pt);",
        "name": "bitmap_point_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a bitmap drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if drawing the bitmap, using the passed in translation,\nwill draw a pixel at the indicated point."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Tests if a bitmap drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "translation": {
            "type": "matrix_2d",
            "description": "Tests if a bitmap drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Tests if a bitmap drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "collisions"
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,int cell,const matrix_2d& translation,const point_2d& pt);",
        "name": "bitmap_point_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if drawing the bitmap, using the passed in translation,\nwill draw a pixel at the indicated point."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Tests if a bitmap cell drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "cell": {
            "type": "int",
            "description": "Tests if a bitmap cell drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "translation": {
            "type": "matrix_2d",
            "description": "Tests if a bitmap cell drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Tests if a bitmap cell drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "collisions"
        }
      },
      {
        "signature": "bool sprite_collision(sprite s1,sprite s2);",
        "name": "sprite_collision",
        "method_name": "collide_with_sprite",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if two given sprites `s1` and `s2` are collided",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "return `true` if both `s1` and `s2` are colliding, false otherwise."
        },
        "parameters": {
          "s1": {
            "type": "sprite",
            "description": "Tests if two given sprites `s1` and `s2` are collided",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "s2": {
            "type": "sprite",
            "description": "Tests if two given sprites `s1` and `s2` are collided",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "collide_with_sprite",
          "self": "s1",
          "static": "collisions"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "color": {
    "name": "color",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "byte alpha_of(color c);",
        "name": "alpha_of",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the alpha of the supplied color.",
        "brief": null,
        "return": {
          "type": "byte",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "Returns the alpha of the supplied color.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_alice_blue();",
        "name": "color_alice_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `alice_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `alice_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_antique_white();",
        "name": "color_antique_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `antique_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `antique_white`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_aqua();",
        "name": "color_aqua",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `aqua`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `aqua`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_aquamarine();",
        "name": "color_aquamarine",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `aquamarine`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `aquamarine`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_azure();",
        "name": "color_azure",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `azure`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `azure`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_beige();",
        "name": "color_beige",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `beige`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `beige`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_bisque();",
        "name": "color_bisque",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `bisque`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `bisque`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_black();",
        "name": "color_black",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `black`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `black`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_blanched_almond();",
        "name": "color_blanched_almond",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `blanched_almond`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `blanched_almond`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_blue();",
        "name": "color_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_blue_violet();",
        "name": "color_blue_violet",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `blue_violet`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `blue_violet`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_bright_green();",
        "name": "color_bright_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `bright_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `bright_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_brown();",
        "name": "color_brown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `brown`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_burly_wood();",
        "name": "color_burly_wood",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `burly_wood`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `burly_wood`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_cadet_blue();",
        "name": "color_cadet_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cadet_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `cadet_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_chartreuse();",
        "name": "color_chartreuse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `chartreuse`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `chartreuse`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_chocolate();",
        "name": "color_chocolate",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `chocolate`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `chocolate`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_coral();",
        "name": "color_coral",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `coral`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `coral`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_cornflower_blue();",
        "name": "color_cornflower_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cornflower_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `cornflower_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_cornsilk();",
        "name": "color_cornsilk",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cornsilk`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `cornsilk`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_crimson();",
        "name": "color_crimson",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `crimson`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `crimson`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_cyan();",
        "name": "color_cyan",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cyan`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `cyan`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_blue();",
        "name": "color_dark_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_cyan();",
        "name": "color_dark_cyan",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_cyan`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_cyan`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_goldenrod();",
        "name": "color_dark_goldenrod",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_goldenrod`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_goldenrod`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_gray();",
        "name": "color_dark_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_gray`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_green();",
        "name": "color_dark_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_khaki();",
        "name": "color_dark_khaki",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_khaki`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_khaki`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_magenta();",
        "name": "color_dark_magenta",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_magenta`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_magenta`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_olive_green();",
        "name": "color_dark_olive_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_olive_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_olive_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_orange();",
        "name": "color_dark_orange",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_orange`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_orange`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_orchid();",
        "name": "color_dark_orchid",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_orchid`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_orchid`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_red();",
        "name": "color_dark_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_red`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_salmon();",
        "name": "color_dark_salmon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_salmon`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_salmon`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_sea_green();",
        "name": "color_dark_sea_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_sea_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_slate_blue();",
        "name": "color_dark_slate_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_slate_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_slate_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_slate_gray();",
        "name": "color_dark_slate_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_slate_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_slate_gray`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_turquoise();",
        "name": "color_dark_turquoise",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_turquoise`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dark_violet();",
        "name": "color_dark_violet",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_violet`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dark_violet`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_deep_pink();",
        "name": "color_deep_pink",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `deep_pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `deep_pink`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_deep_sky_blue();",
        "name": "color_deep_sky_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `deep_sky_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `deep_sky_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dim_gray();",
        "name": "color_dim_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dim_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dim_gray`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_dodger_blue();",
        "name": "color_dodger_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dodger_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `dodger_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_firebrick();",
        "name": "color_firebrick",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `firebrick`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `firebrick`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_floral_white();",
        "name": "color_floral_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `floral_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `floral_white`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_forest_green();",
        "name": "color_forest_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `forest_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `forest_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_fuchsia();",
        "name": "color_fuchsia",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `fuchsia`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `fuchsia`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_gainsboro();",
        "name": "color_gainsboro",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `gainsboro`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `gainsboro`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_ghost_white();",
        "name": "color_ghost_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `ghost_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `ghost_white`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_gold();",
        "name": "color_gold",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `gold`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `gold`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_goldenrod();",
        "name": "color_goldenrod",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `goldenrod`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `goldenrod`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_gray();",
        "name": "color_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `gray`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_green();",
        "name": "color_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_green_yellow();",
        "name": "color_green_yellow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `green_yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `green_yellow`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_grey();",
        "name": "color_grey",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `grey`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `grey`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_honeydew();",
        "name": "color_honeydew",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `honeydew`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `honeydew`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_hot_pink();",
        "name": "color_hot_pink",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `hot_pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `hot_pink`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_indian_red();",
        "name": "color_indian_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `indian_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `indian_red`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_indigo();",
        "name": "color_indigo",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `indigo`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `indigo`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_ivory();",
        "name": "color_ivory",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `ivory`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `ivory`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_khaki();",
        "name": "color_khaki",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `khaki`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `khaki`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_lavender();",
        "name": "color_lavender",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lavender`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `lavender`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_lavender_blush();",
        "name": "color_lavender_blush",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lavender_blush`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `lavender_blush`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_lawn_green();",
        "name": "color_lawn_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lawn_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `lawn_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_lemon_chiffon();",
        "name": "color_lemon_chiffon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lemon_chiffon`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `lemon_chiffon`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_blue();",
        "name": "color_light_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_coral();",
        "name": "color_light_coral",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_coral`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_coral`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_cyan();",
        "name": "color_light_cyan",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_cyan`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_cyan`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_goldenrod_yellow();",
        "name": "color_light_goldenrod_yellow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_goldenrod_yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_goldenrod_yellow`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_gray();",
        "name": "color_light_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_gray`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_green();",
        "name": "color_light_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_grey();",
        "name": "color_light_grey",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_grey`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_grey`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_pink();",
        "name": "color_light_pink",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_pink`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_salmon();",
        "name": "color_light_salmon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_salmon`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_salmon`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_sea_green();",
        "name": "color_light_sea_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_sea_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_sky_blue();",
        "name": "color_light_sky_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_sky_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_sky_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_slate_gray();",
        "name": "color_light_slate_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_slate_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_slate_gray`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_steel_blue();",
        "name": "color_light_steel_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_steel_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_steel_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_light_yellow();",
        "name": "color_light_yellow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `light_yellow`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_lime();",
        "name": "color_lime",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lime`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `lime`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_lime_green();",
        "name": "color_lime_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lime_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `lime_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_linen();",
        "name": "color_linen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `linen`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `linen`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_magenta();",
        "name": "color_magenta",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `magenta`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `magenta`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_maroon();",
        "name": "color_maroon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `maroon`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `maroon`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_medium_aquamarine();",
        "name": "color_medium_aquamarine",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_aquamarine`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `medium_aquamarine`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_medium_blue();",
        "name": "color_medium_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `medium_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_medium_orchid();",
        "name": "color_medium_orchid",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_orchid`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `medium_orchid`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_medium_purple();",
        "name": "color_medium_purple",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_purple`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `medium_purple`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_medium_sea_green();",
        "name": "color_medium_sea_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `medium_sea_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_medium_slate_blue();",
        "name": "color_medium_slate_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_slate_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `medium_slate_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_medium_spring_green();",
        "name": "color_medium_spring_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_spring_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `medium_spring_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_medium_turquoise();",
        "name": "color_medium_turquoise",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `medium_turquoise`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_medium_violet_red();",
        "name": "color_medium_violet_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_violet_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `medium_violet_red`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_midnight_blue();",
        "name": "color_midnight_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `midnight_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `midnight_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_mint_cream();",
        "name": "color_mint_cream",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `mint_cream`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `mint_cream`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_misty_rose();",
        "name": "color_misty_rose",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `misty_rose`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `misty_rose`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_moccasin();",
        "name": "color_moccasin",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `moccasin`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `moccasin`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_navajo_white();",
        "name": "color_navajo_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `navajo_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `navajo_white`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_navy();",
        "name": "color_navy",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `navy`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `navy`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_old_lace();",
        "name": "color_old_lace",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `old_lace`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `old_lace`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_olive();",
        "name": "color_olive",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `olive`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `olive`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_olive_drab();",
        "name": "color_olive_drab",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `olive_drab`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `olive_drab`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_orange();",
        "name": "color_orange",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `orange`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `orange`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_orange_red();",
        "name": "color_orange_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `orange_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `orange_red`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_orchid();",
        "name": "color_orchid",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `orchid`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `orchid`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_pale_goldenrod();",
        "name": "color_pale_goldenrod",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_goldenrod`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `pale_goldenrod`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_pale_green();",
        "name": "color_pale_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `pale_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_pale_turquoise();",
        "name": "color_pale_turquoise",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `pale_turquoise`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_pale_violet_red();",
        "name": "color_pale_violet_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_violet_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `pale_violet_red`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_papaya_whip();",
        "name": "color_papaya_whip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `papaya_whip`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `papaya_whip`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_peach_puff();",
        "name": "color_peach_puff",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `peach_puff`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `peach_puff`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_peru();",
        "name": "color_peru",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `peru`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `peru`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_pink();",
        "name": "color_pink",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `pink`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_plum();",
        "name": "color_plum",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `plum`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `plum`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_powder_blue();",
        "name": "color_powder_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `powder_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `powder_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_purple();",
        "name": "color_purple",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `purple`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `purple`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_red();",
        "name": "color_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `red`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `red`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_rosy_brown();",
        "name": "color_rosy_brown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `rosy_brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `rosy_brown`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_royal_blue();",
        "name": "color_royal_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `royal_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `royal_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_saddle_brown();",
        "name": "color_saddle_brown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `saddle_brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `saddle_brown`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_salmon();",
        "name": "color_salmon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `salmon`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `salmon`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_sandy_brown();",
        "name": "color_sandy_brown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sandy_brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `sandy_brown`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_sea_green();",
        "name": "color_sea_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `sea_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_sea_shell();",
        "name": "color_sea_shell",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sea_shell`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `sea_shell`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_sienna();",
        "name": "color_sienna",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sienna`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `sienna`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_silver();",
        "name": "color_silver",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `silver`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `silver`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_sky_blue();",
        "name": "color_sky_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sky_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `sky_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_slate_blue();",
        "name": "color_slate_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `slate_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `slate_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_slate_gray();",
        "name": "color_slate_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `slate_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `slate_gray`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_snow();",
        "name": "color_snow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `snow`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `snow`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_spring_green();",
        "name": "color_spring_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `spring_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `spring_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_steel_blue();",
        "name": "color_steel_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `steel_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `steel_blue`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_swinburne_red();",
        "name": "color_swinburne_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `swinburne_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `swinburne_red`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_tan();",
        "name": "color_tan",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `tan`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `tan`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_teal();",
        "name": "color_teal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `teal`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `teal`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_thistle();",
        "name": "color_thistle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `thistle`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `thistle`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "string color_to_string(color c);",
        "name": "color_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a string representation of the color.\nFormat will be a hex string starting with a #,\nfollowed by the red, green, blue, and alpha\nvalues of the color.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "Returns a string representation of the color.\nFormat will be a hex string starting with a #,\nfollowed by the red, green, blue, and alpha\nvalues of the color.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_tomato();",
        "name": "color_tomato",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `tomato`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `tomato`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_transparent();",
        "name": "color_transparent",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `transparent`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A `transparent` color (i.e., a color with an `alpha` of 0)."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_turquoise();",
        "name": "color_turquoise",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `turquoise`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_violet();",
        "name": "color_violet",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `violet`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `violet`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_wheat();",
        "name": "color_wheat",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `wheat`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `wheat`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_white();",
        "name": "color_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `white`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `white`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_white_smoke();",
        "name": "color_white_smoke",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `white_smoke`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `white_smoke`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_yellow();",
        "name": "color_yellow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `yellow`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color color_yellow_green();",
        "name": "color_yellow_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `yellow_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `color` set to `yellow_green`."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "color rgba_color(float red,float green,float blue,float alpha);",
        "name": "rgba_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a color given its color components. Each of the components has\na value between 0 and 1.0.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "red": {
            "type": "float",
            "description": "Gets a color given its color components. Each of the components has\na value between 0 and 1.0.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "green": {
            "type": "float",
            "description": "Gets a color given its color components. Each of the components has\na value between 0 and 1.0.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "blue": {
            "type": "float",
            "description": "Gets a color given its color components. Each of the components has\na value between 0 and 1.0.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "alpha": {
            "type": "float",
            "description": "Gets a color given its color components. Each of the components has\na value between 0 and 1.0.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "color string_to_color(string str);",
        "name": "string_to_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a color for the passed in color string.\nThe format must be #, followed by the hex values\nfor the red, green, blue, and alpha components\nof the color.",
        "brief": null,
        "return": {
          "type": "color",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "str": {
            "type": "string",
            "description": "Returns a color for the passed in color string.\nThe format must be #, followed by the hex values\nfor the red, green, blue, and alpha components\nof the color.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [
      {
        "name": "COLOR_ALICE_BLUE",
        "description": "A shorthand macro to the result of calling `color_alice_blue`.",
        "brief": null,
        "definition": "color_alice_blue()"
      },
      {
        "name": "COLOR_ANTIQUE_WHITE",
        "description": "A shorthand macro to the result of calling `color_antique_white`.",
        "brief": null,
        "definition": "color_antique_white()"
      },
      {
        "name": "COLOR_AQUA",
        "description": "A shorthand macro to the result of calling `color_aqua`.",
        "brief": null,
        "definition": "color_aqua()"
      },
      {
        "name": "COLOR_AQUAMARINE",
        "description": "A shorthand macro to the result of calling `color_aquamarine`.",
        "brief": null,
        "definition": "color_aquamarine()"
      },
      {
        "name": "COLOR_AZURE",
        "description": "A shorthand macro to the result of calling `color_azure`.",
        "brief": null,
        "definition": "color_azure()"
      },
      {
        "name": "COLOR_BEIGE",
        "description": "A shorthand macro to the result of calling `color_beige`.",
        "brief": null,
        "definition": "color_beige()"
      },
      {
        "name": "COLOR_BISQUE",
        "description": "A shorthand macro to the result of calling `color_bisque`.",
        "brief": null,
        "definition": "color_bisque()"
      },
      {
        "name": "COLOR_BLACK",
        "description": "A shorthand macro to the result of calling `color_black`.",
        "brief": null,
        "definition": "color_black()"
      },
      {
        "name": "COLOR_BLANCHED_ALMOND",
        "description": "A shorthand macro to the result of calling `color_blanched_almond`.",
        "brief": null,
        "definition": "color_blanched_almond()"
      },
      {
        "name": "COLOR_BLUE",
        "description": "A shorthand macro to the result of calling `color_blue`.",
        "brief": null,
        "definition": "color_blue()"
      },
      {
        "name": "COLOR_BLUE_VIOLET",
        "description": "A shorthand macro to the result of calling `color_blue_violet`.",
        "brief": null,
        "definition": "color_blue_violet()"
      },
      {
        "name": "COLOR_BRIGHT_GREEN",
        "description": "A shorthand macro to the result of calling `color_bright_green`.",
        "brief": null,
        "definition": "color_bright_green()"
      },
      {
        "name": "COLOR_BROWN",
        "description": "A shorthand macro to the result of calling `color_brown`.",
        "brief": null,
        "definition": "color_brown()"
      },
      {
        "name": "COLOR_BURLY_WOOD",
        "description": "A shorthand macro to the result of calling `color_burly_wood`.",
        "brief": null,
        "definition": "color_burly_wood()"
      },
      {
        "name": "COLOR_CADET_BLUE",
        "description": "A shorthand macro to the result of calling `color_cadet_blue`.",
        "brief": null,
        "definition": "color_cadet_blue()"
      },
      {
        "name": "COLOR_CHARTREUSE",
        "description": "A shorthand macro to the result of calling `color_chartreuse`.",
        "brief": null,
        "definition": "color_chartreuse()"
      },
      {
        "name": "COLOR_CHOCOLATE",
        "description": "A shorthand macro to the result of calling `color_chocolate`.",
        "brief": null,
        "definition": "color_chocolate()"
      },
      {
        "name": "COLOR_CORAL",
        "description": "A shorthand macro to the result of calling `color_coral`.",
        "brief": null,
        "definition": "color_coral()"
      },
      {
        "name": "COLOR_CORNFLOWER_BLUE",
        "description": "A shorthand macro to the result of calling `color_cornflower_blue`.",
        "brief": null,
        "definition": "color_cornflower_blue()"
      },
      {
        "name": "COLOR_CORNSILK",
        "description": "A shorthand macro to the result of calling `color_cornsilk`.",
        "brief": null,
        "definition": "color_cornsilk()"
      },
      {
        "name": "COLOR_CRIMSON",
        "description": "A shorthand macro to the result of calling `color_crimson`.",
        "brief": null,
        "definition": "color_crimson()"
      },
      {
        "name": "COLOR_CYAN",
        "description": "A shorthand macro to the result of calling `color_cyan`.",
        "brief": null,
        "definition": "color_cyan()"
      },
      {
        "name": "COLOR_DARK_BLUE",
        "description": "A shorthand macro to the result of calling `color_dark_blue`.",
        "brief": null,
        "definition": "color_dark_blue()"
      },
      {
        "name": "COLOR_DARK_CYAN",
        "description": "A shorthand macro to the result of calling `color_dark_cyan`.",
        "brief": null,
        "definition": "color_dark_cyan()"
      },
      {
        "name": "COLOR_DARK_GOLDENROD",
        "description": "A shorthand macro to the result of calling `color_dark_goldenrod`.",
        "brief": null,
        "definition": "color_dark_goldenrod()"
      },
      {
        "name": "COLOR_DARK_GRAY",
        "description": "A shorthand macro to the result of calling `color_dark_gray`.",
        "brief": null,
        "definition": "color_dark_gray()"
      },
      {
        "name": "COLOR_DARK_GREEN",
        "description": "A shorthand macro to the result of calling `color_dark_green`.",
        "brief": null,
        "definition": "color_dark_green()"
      },
      {
        "name": "COLOR_DARK_KHAKI",
        "description": "A shorthand macro to the result of calling `color_dark_khaki`.",
        "brief": null,
        "definition": "color_dark_khaki()"
      },
      {
        "name": "COLOR_DARK_MAGENTA",
        "description": "A shorthand macro to the result of calling `color_dark_magenta`.",
        "brief": null,
        "definition": "color_dark_magenta()"
      },
      {
        "name": "COLOR_DARK_OLIVE_GREEN",
        "description": "A shorthand macro to the result of calling `color_dark_olive_green`.",
        "brief": null,
        "definition": "color_dark_olive_green()"
      },
      {
        "name": "COLOR_DARK_ORANGE",
        "description": "A shorthand macro to the result of calling `color_dark_orange`.",
        "brief": null,
        "definition": "color_dark_orange()"
      },
      {
        "name": "COLOR_DARK_ORCHID",
        "description": "A shorthand macro to the result of calling `color_dark_orchid`.",
        "brief": null,
        "definition": "color_dark_orchid()"
      },
      {
        "name": "COLOR_DARK_RED",
        "description": "A shorthand macro to the result of calling `color_dark_red`.",
        "brief": null,
        "definition": "color_dark_red()"
      },
      {
        "name": "COLOR_DARK_SALMON",
        "description": "A shorthand macro to the result of calling `color_dark_salmon`.",
        "brief": null,
        "definition": "color_dark_salmon()"
      },
      {
        "name": "COLOR_DARK_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_dark_sea_green`.",
        "brief": null,
        "definition": "color_dark_sea_green()"
      },
      {
        "name": "COLOR_DARK_SLATE_BLUE",
        "description": "A shorthand macro to the result of calling `color_dark_slate_blue`.",
        "brief": null,
        "definition": "color_dark_slate_blue()"
      },
      {
        "name": "COLOR_DARK_SLATE_GRAY",
        "description": "A shorthand macro to the result of calling `color_dark_slate_gray`.",
        "brief": null,
        "definition": "color_dark_slate_gray()"
      },
      {
        "name": "COLOR_DARK_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_dark_turquoise`.",
        "brief": null,
        "definition": "color_dark_turquoise()"
      },
      {
        "name": "COLOR_DARK_VIOLET",
        "description": "A shorthand macro to the result of calling `color_dark_violet`.",
        "brief": null,
        "definition": "color_dark_violet()"
      },
      {
        "name": "COLOR_DEEP_PINK",
        "description": "A shorthand macro to the result of calling `color_deep_pink`.",
        "brief": null,
        "definition": "color_deep_pink()"
      },
      {
        "name": "COLOR_DEEP_SKY_BLUE",
        "description": "A shorthand macro to the result of calling `color_deep_sky_blue`.",
        "brief": null,
        "definition": "color_deep_sky_blue()"
      },
      {
        "name": "COLOR_DIM_GRAY",
        "description": "A shorthand macro to the result of calling `color_dim_gray`.",
        "brief": null,
        "definition": "color_dim_gray()"
      },
      {
        "name": "COLOR_DODGER_BLUE",
        "description": "A shorthand macro to the result of calling `color_dodger_blue`.",
        "brief": null,
        "definition": "color_dodger_blue()"
      },
      {
        "name": "COLOR_FIREBRICK",
        "description": "A shorthand macro to the result of calling `color_firebrick`.",
        "brief": null,
        "definition": "color_firebrick()"
      },
      {
        "name": "COLOR_FLORAL_WHITE",
        "description": "A shorthand macro to the result of calling `color_floral_white`.",
        "brief": null,
        "definition": "color_floral_white()"
      },
      {
        "name": "COLOR_FOREST_GREEN",
        "description": "A shorthand macro to the result of calling `color_forest_green`.",
        "brief": null,
        "definition": "color_forest_green()"
      },
      {
        "name": "COLOR_FUCHSIA",
        "description": "A shorthand macro to the result of calling `color_fuchsia`.",
        "brief": null,
        "definition": "color_fuchsia()"
      },
      {
        "name": "COLOR_GAINSBORO",
        "description": "A shorthand macro to the result of calling `color_gainsboro`.",
        "brief": null,
        "definition": "color_gainsboro()"
      },
      {
        "name": "COLOR_GHOST_WHITE",
        "description": "A shorthand macro to the result of calling `color_ghost_white`.",
        "brief": null,
        "definition": "color_ghost_white()"
      },
      {
        "name": "COLOR_GOLD",
        "description": "A shorthand macro to the result of calling `color_gold`.",
        "brief": null,
        "definition": "color_gold()"
      },
      {
        "name": "COLOR_GOLDENROD",
        "description": "A shorthand macro to the result of calling `color_goldenrod`.",
        "brief": null,
        "definition": "color_goldenrod()"
      },
      {
        "name": "COLOR_GRAY",
        "description": "A shorthand macro to the result of calling `color_gray`.",
        "brief": null,
        "definition": "color_gray()"
      },
      {
        "name": "COLOR_GREEN",
        "description": "A shorthand macro to the result of calling `color_green`.",
        "brief": null,
        "definition": "color_green()"
      },
      {
        "name": "COLOR_GREEN_YELLOW",
        "description": "A shorthand macro to the result of calling `color_green_yellow`.",
        "brief": null,
        "definition": "color_green_yellow()"
      },
      {
        "name": "COLOR_GREY",
        "description": "A shorthand macro to the result of calling `color_grey`.",
        "brief": null,
        "definition": "color_grey()"
      },
      {
        "name": "COLOR_HONEYDEW",
        "description": "A shorthand macro to the result of calling `color_honeydew`.",
        "brief": null,
        "definition": "color_honeydew()"
      },
      {
        "name": "COLOR_HOT_PINK",
        "description": "A shorthand macro to the result of calling `color_hot_pink`.",
        "brief": null,
        "definition": "color_hot_pink()"
      },
      {
        "name": "COLOR_INDIAN_RED",
        "description": "A shorthand macro to the result of calling `color_indian_red`.",
        "brief": null,
        "definition": "color_indian_red()"
      },
      {
        "name": "COLOR_INDIGO",
        "description": "A shorthand macro to the result of calling `color_indigo`.",
        "brief": null,
        "definition": "color_indigo()"
      },
      {
        "name": "COLOR_IVORY",
        "description": "A shorthand macro to the result of calling `color_ivory`.",
        "brief": null,
        "definition": "color_ivory()"
      },
      {
        "name": "COLOR_KHAKI",
        "description": "A shorthand macro to the result of calling `color_khaki`.",
        "brief": null,
        "definition": "color_khaki()"
      },
      {
        "name": "COLOR_LAVENDER",
        "description": "A shorthand macro to the result of calling `color_lavender`.",
        "brief": null,
        "definition": "color_lavender()"
      },
      {
        "name": "COLOR_LAVENDER_BLUSH",
        "description": "A shorthand macro to the result of calling `color_lavender_blush`.",
        "brief": null,
        "definition": "color_lavender_blush()"
      },
      {
        "name": "COLOR_LAWN_GREEN",
        "description": "A shorthand macro to the result of calling `color_lawn_green`.",
        "brief": null,
        "definition": "color_lawn_green()"
      },
      {
        "name": "COLOR_LEMON_CHIFFON",
        "description": "A shorthand macro to the result of calling `color_lemon_chiffon`.",
        "brief": null,
        "definition": "color_lemon_chiffon()"
      },
      {
        "name": "COLOR_LIGHT_BLUE",
        "description": "A shorthand macro to the result of calling `color_light_blue`.",
        "brief": null,
        "definition": "color_light_blue()"
      },
      {
        "name": "COLOR_LIGHT_CORAL",
        "description": "A shorthand macro to the result of calling `color_light_coral`.",
        "brief": null,
        "definition": "color_light_coral()"
      },
      {
        "name": "COLOR_LIGHT_CYAN",
        "description": "A shorthand macro to the result of calling `color_light_cyan`.",
        "brief": null,
        "definition": "color_light_cyan()"
      },
      {
        "name": "COLOR_LIGHT_GOLDENROD_YELLOW",
        "description": "A shorthand macro to the result of calling `color_light_goldenrod_yellow`.",
        "brief": null,
        "definition": "color_light_goldenrod_yellow()"
      },
      {
        "name": "COLOR_LIGHT_GRAY",
        "description": "A shorthand macro to the result of calling `color_light_gray`.",
        "brief": null,
        "definition": "color_light_gray()"
      },
      {
        "name": "COLOR_LIGHT_GREEN",
        "description": "A shorthand macro to the result of calling `color_light_green`.",
        "brief": null,
        "definition": "color_light_green()"
      },
      {
        "name": "COLOR_LIGHT_GREY",
        "description": "A shorthand macro to the result of calling `color_light_grey`.",
        "brief": null,
        "definition": "color_light_grey()"
      },
      {
        "name": "COLOR_LIGHT_PINK",
        "description": "A shorthand macro to the result of calling `color_light_pink`.",
        "brief": null,
        "definition": "color_light_pink()"
      },
      {
        "name": "COLOR_LIGHT_SALMON",
        "description": "A shorthand macro to the result of calling `color_light_salmon`.",
        "brief": null,
        "definition": "color_light_salmon()"
      },
      {
        "name": "COLOR_LIGHT_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_light_sea_green`.",
        "brief": null,
        "definition": "color_light_sea_green()"
      },
      {
        "name": "COLOR_LIGHT_SKY_BLUE",
        "description": "A shorthand macro to the result of calling `color_light_sky_blue`.",
        "brief": null,
        "definition": "color_light_sky_blue()"
      },
      {
        "name": "COLOR_LIGHT_SLATE_GRAY",
        "description": "A shorthand macro to the result of calling `color_light_slate_gray`.",
        "brief": null,
        "definition": "color_light_slate_gray()"
      },
      {
        "name": "COLOR_LIGHT_STEEL_BLUE",
        "description": "A shorthand macro to the result of calling `color_light_steel_blue`.",
        "brief": null,
        "definition": "color_light_steel_blue()"
      },
      {
        "name": "COLOR_LIGHT_YELLOW",
        "description": "A shorthand macro to the result of calling `color_light_yellow`.",
        "brief": null,
        "definition": "color_light_yellow()"
      },
      {
        "name": "COLOR_LIME",
        "description": "A shorthand macro to the result of calling `color_lime`.",
        "brief": null,
        "definition": "color_lime()"
      },
      {
        "name": "COLOR_LIME_GREEN",
        "description": "A shorthand macro to the result of calling `color_lime_green`.",
        "brief": null,
        "definition": "color_lime_green()"
      },
      {
        "name": "COLOR_LINEN",
        "description": "A shorthand macro to the result of calling `color_linen`.",
        "brief": null,
        "definition": "color_linen()"
      },
      {
        "name": "COLOR_MAGENTA",
        "description": "A shorthand macro to the result of calling `color_magenta`.",
        "brief": null,
        "definition": "color_magenta()"
      },
      {
        "name": "COLOR_MAROON",
        "description": "A shorthand macro to the result of calling `color_maroon`.",
        "brief": null,
        "definition": "color_maroon()"
      },
      {
        "name": "COLOR_MEDIUM_AQUAMARINE",
        "description": "A shorthand macro to the result of calling `color_medium_aquamarine`.",
        "brief": null,
        "definition": "color_medium_aquamarine()"
      },
      {
        "name": "COLOR_MEDIUM_BLUE",
        "description": "A shorthand macro to the result of calling `color_medium_blue`.",
        "brief": null,
        "definition": "color_medium_blue()"
      },
      {
        "name": "COLOR_MEDIUM_ORCHID",
        "description": "A shorthand macro to the result of calling `color_medium_orchid`.",
        "brief": null,
        "definition": "color_medium_orchid()"
      },
      {
        "name": "COLOR_MEDIUM_PURPLE",
        "description": "A shorthand macro to the result of calling `color_medium_purple`.",
        "brief": null,
        "definition": "color_medium_purple()"
      },
      {
        "name": "COLOR_MEDIUM_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_medium_sea_green`.",
        "brief": null,
        "definition": "color_medium_sea_green()"
      },
      {
        "name": "COLOR_MEDIUM_SLATE_BLUE",
        "description": "A shorthand macro to the result of calling `color_medium_slate_blue`.",
        "brief": null,
        "definition": "color_medium_slate_blue()"
      },
      {
        "name": "COLOR_MEDIUM_SPRING_GREEN",
        "description": "A shorthand macro to the result of calling `color_medium_spring_green`.",
        "brief": null,
        "definition": "color_medium_spring_green()"
      },
      {
        "name": "COLOR_MEDIUM_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_medium_turquoise`.",
        "brief": null,
        "definition": "color_medium_turquoise()"
      },
      {
        "name": "COLOR_MEDIUM_VIOLET_RED",
        "description": "A shorthand macro to the result of calling `color_medium_violet_red`.",
        "brief": null,
        "definition": "color_medium_violet_red()"
      },
      {
        "name": "COLOR_MIDNIGHT_BLUE",
        "description": "A shorthand macro to the result of calling `color_midnight_blue`.",
        "brief": null,
        "definition": "color_midnight_blue()"
      },
      {
        "name": "COLOR_MINT_CREAM",
        "description": "A shorthand macro to the result of calling `color_mint_cream`.",
        "brief": null,
        "definition": "color_mint_cream()"
      },
      {
        "name": "COLOR_MISTY_ROSE",
        "description": "A shorthand macro to the result of calling `color_misty_rose`.",
        "brief": null,
        "definition": "color_misty_rose()"
      },
      {
        "name": "COLOR_MOCCASIN",
        "description": "A shorthand macro to the result of calling `color_moccasin`.",
        "brief": null,
        "definition": "color_moccasin()"
      },
      {
        "name": "COLOR_NAVAJO_WHITE",
        "description": "A shorthand macro to the result of calling `color_navajo_white`.",
        "brief": null,
        "definition": "color_navajo_white()"
      },
      {
        "name": "COLOR_NAVY",
        "description": "A shorthand macro to the result of calling `color_navy`.",
        "brief": null,
        "definition": "color_navy()"
      },
      {
        "name": "COLOR_OLD_LACE",
        "description": "A shorthand macro to the result of calling `color_old_lace`.",
        "brief": null,
        "definition": "color_old_lace()"
      },
      {
        "name": "COLOR_OLIVE",
        "description": "A shorthand macro to the result of calling `color_olive`.",
        "brief": null,
        "definition": "color_olive()"
      },
      {
        "name": "COLOR_OLIVE_DRAB",
        "description": "A shorthand macro to the result of calling `color_olive_drab`.",
        "brief": null,
        "definition": "color_olive_drab()"
      },
      {
        "name": "COLOR_ORANGE",
        "description": "A shorthand macro to the result of calling `color_orange`.",
        "brief": null,
        "definition": "color_orange()"
      },
      {
        "name": "COLOR_ORANGE_RED",
        "description": "A shorthand macro to the result of calling `color_orange_red`.",
        "brief": null,
        "definition": "color_orange_red()"
      },
      {
        "name": "COLOR_ORCHID",
        "description": "A shorthand macro to the result of calling `color_orchid`.",
        "brief": null,
        "definition": "color_orchid()"
      },
      {
        "name": "COLOR_PALE_GOLDENROD",
        "description": "A shorthand macro to the result of calling `color_pale_goldenrod`.",
        "brief": null,
        "definition": "color_pale_goldenrod()"
      },
      {
        "name": "COLOR_PALE_GREEN",
        "description": "A shorthand macro to the result of calling `color_pale_green`.",
        "brief": null,
        "definition": "color_pale_green()"
      },
      {
        "name": "COLOR_PALE_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_pale_turquoise`.",
        "brief": null,
        "definition": "color_pale_turquoise()"
      },
      {
        "name": "COLOR_PALE_VIOLET_RED",
        "description": "A shorthand macro to the result of calling `color_pale_violet_red`.",
        "brief": null,
        "definition": "color_pale_violet_red()"
      },
      {
        "name": "COLOR_PAPAYA_WHIP",
        "description": "A shorthand macro to the result of calling `color_papaya_whip`.",
        "brief": null,
        "definition": "color_papaya_whip()"
      },
      {
        "name": "COLOR_PEACH_PUFF",
        "description": "A shorthand macro to the result of calling `color_peach_puff`.",
        "brief": null,
        "definition": "color_peach_puff()"
      },
      {
        "name": "COLOR_PERU",
        "description": "A shorthand macro to the result of calling `color_peru`.",
        "brief": null,
        "definition": "color_peru()"
      },
      {
        "name": "COLOR_PINK",
        "description": "A shorthand macro to the result of calling `color_pink`.",
        "brief": null,
        "definition": "color_pink()"
      },
      {
        "name": "COLOR_PLUM",
        "description": "A shorthand macro to the result of calling `color_plum`.",
        "brief": null,
        "definition": "color_plum()"
      },
      {
        "name": "COLOR_POWDER_BLUE",
        "description": "A shorthand macro to the result of calling `color_powder_blue`.",
        "brief": null,
        "definition": "color_powder_blue()"
      },
      {
        "name": "COLOR_PURPLE",
        "description": "A shorthand macro to the result of calling `color_purple`.",
        "brief": null,
        "definition": "color_purple()"
      },
      {
        "name": "COLOR_RED",
        "description": "A shorthand macro to the result of calling `color_red`.",
        "brief": null,
        "definition": "color_red()"
      },
      {
        "name": "COLOR_ROSY_BROWN",
        "description": "A shorthand macro to the result of calling `color_rosy_brown`.",
        "brief": null,
        "definition": "color_rosy_brown()"
      },
      {
        "name": "COLOR_ROYAL_BLUE",
        "description": "A shorthand macro to the result of calling `color_royal_blue`.",
        "brief": null,
        "definition": "color_royal_blue()"
      },
      {
        "name": "COLOR_SADDLE_BROWN",
        "description": "A shorthand macro to the result of calling `color_saddle_brown`.",
        "brief": null,
        "definition": "color_saddle_brown()"
      },
      {
        "name": "COLOR_SALMON",
        "description": "A shorthand macro to the result of calling `color_salmon`.",
        "brief": null,
        "definition": "color_salmon()"
      },
      {
        "name": "COLOR_SANDY_BROWN",
        "description": "A shorthand macro to the result of calling `color_sandy_brown`.",
        "brief": null,
        "definition": "color_sandy_brown()"
      },
      {
        "name": "COLOR_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_sea_green`.",
        "brief": null,
        "definition": "color_sea_green()"
      },
      {
        "name": "COLOR_SEA_SHELL",
        "description": "A shorthand macro to the result of calling `color_sea_shell`.",
        "brief": null,
        "definition": "color_sea_shell()"
      },
      {
        "name": "COLOR_SIENNA",
        "description": "A shorthand macro to the result of calling `color_sienna`.",
        "brief": null,
        "definition": "color_sienna()"
      },
      {
        "name": "COLOR_SILVER",
        "description": "A shorthand macro to the result of calling `color_silver`.",
        "brief": null,
        "definition": "color_silver()"
      },
      {
        "name": "COLOR_SKY_BLUE",
        "description": "A shorthand macro to the result of calling `color_sky_blue`.",
        "brief": null,
        "definition": "color_sky_blue()"
      },
      {
        "name": "COLOR_SLATE_BLUE",
        "description": "A shorthand macro to the result of calling `color_slate_blue`.",
        "brief": null,
        "definition": "color_slate_blue()"
      },
      {
        "name": "COLOR_SLATE_GRAY",
        "description": "A shorthand macro to the result of calling `color_slate_gray`.",
        "brief": null,
        "definition": "color_slate_gray()"
      },
      {
        "name": "COLOR_SNOW",
        "description": "A shorthand macro to the result of calling `color_snow`.",
        "brief": null,
        "definition": "color_snow()"
      },
      {
        "name": "COLOR_SPRING_GREEN",
        "description": "A shorthand macro to the result of calling `color_spring_green`.",
        "brief": null,
        "definition": "color_spring_green()"
      },
      {
        "name": "COLOR_STEEL_BLUE",
        "description": "A shorthand macro to the result of calling `color_steel_blue`.",
        "brief": null,
        "definition": "color_steel_blue()"
      },
      {
        "name": "COLOR_SWINBURNE_RED",
        "description": "A shorthand macro to the result of calling `color_swinburne_red`.",
        "brief": null,
        "definition": "color_swinburne_red()"
      },
      {
        "name": "COLOR_TAN",
        "description": "A shorthand macro to the result of calling `color_tan`.",
        "brief": null,
        "definition": "color_tan()"
      },
      {
        "name": "COLOR_TEAL",
        "description": "A shorthand macro to the result of calling `color_teal`.",
        "brief": null,
        "definition": "color_teal()"
      },
      {
        "name": "COLOR_THISTLE",
        "description": "A shorthand macro to the result of calling `color_thistle`.",
        "brief": null,
        "definition": "color_thistle()"
      },
      {
        "name": "COLOR_TOMATO",
        "description": "A shorthand macro to the result of calling `color_tomato`.",
        "brief": null,
        "definition": "color_tomato()"
      },
      {
        "name": "COLOR_TRANSPARENT",
        "description": "A shorthand macro to the result of calling `color_transparent`.",
        "brief": null,
        "definition": "color_transparent()"
      },
      {
        "name": "COLOR_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_turquoise`.",
        "brief": null,
        "definition": "color_turquoise()"
      },
      {
        "name": "COLOR_VIOLET",
        "description": "A shorthand macro to the result of calling `color_violet`.",
        "brief": null,
        "definition": "color_violet()"
      },
      {
        "name": "COLOR_WHEAT",
        "description": "A shorthand macro to the result of calling `color_wheat`.",
        "brief": null,
        "definition": "color_wheat()"
      },
      {
        "name": "COLOR_WHITE",
        "description": "A shorthand macro to the result of calling `color_white`.",
        "brief": null,
        "definition": "color_white()"
      },
      {
        "name": "COLOR_WHITE_SMOKE",
        "description": "A shorthand macro to the result of calling `color_white_smoke`.",
        "brief": null,
        "definition": "color_white_smoke()"
      },
      {
        "name": "COLOR_YELLOW",
        "description": "A shorthand macro to the result of calling `color_yellow`.",
        "brief": null,
        "definition": "color_yellow()"
      },
      {
        "name": "COLOR_YELLOW_GREEN",
        "description": "A shorthand macro to the result of calling `color_yellow_green`.",
        "brief": null,
        "definition": "color_yellow_green()"
      }
    ]
  },
  "database": {
    "name": "database",
    "brief": "SplashKit Database allows you to create, query and otherwise manipulate a database.",
    "description": "SplashKit's database library allows you to easily create or load databases\nand to perform queries on them. To get started with databases in SplashKit,\nthe first thinkg you need to do is to load or create a database file. You can\ndo this by calling the `open_database(string name)` function.",
    "functions": [
      {
        "signature": "database database_named(string name);",
        "name": "database_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retrieves a `database` that has been loaded into SplashKit.",
        "brief": null,
        "return": {
          "type": "database",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `database` that has been loaded with the specified\n`name` using `open_database`."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Retrieves a `database` that has been loaded into SplashKit.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "database"
        }
      },
      {
        "signature": "void free_all_databases();",
        "name": "free_all_databases",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the databases which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "static": "database"
        }
      },
      {
        "signature": "void free_all_query_results();",
        "name": "free_all_query_results",
        "method_name": "free_all",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees all of the databases which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all",
          "static": "database"
        }
      },
      {
        "signature": "void free_database(database db_to_close);",
        "name": "free_database",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the SplashKit resources associated with the database.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "db_to_close": {
            "type": "database",
            "description": "Frees the SplashKit resources associated with the database.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "database",
          "destructor": true,
          "static": "database"
        }
      },
      {
        "signature": "void free_database(string name_of_db_to_close);",
        "name": "free_database",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the SplashKit resources associated with the database at a given name.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name_of_db_to_close": {
            "type": "string",
            "description": "Frees the SplashKit resources associated with the database at a given name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "unique": "free_database_named",
          "static": "database"
        }
      },
      {
        "signature": "void free_query_result(query_result query);",
        "name": "free_query_result",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases the SplashKit resources associated with the query.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "query": {
            "type": "query_result",
            "description": "Releases the SplashKit resources associated with the query.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "destructor": true,
          "self": "query",
          "static": "database"
        }
      },
      {
        "signature": "bool get_next_row(query_result result);",
        "name": "get_next_row",
        "method_name": "get_next_row",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the next row available on a given `query_result`.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `bool` which represents if there was a valid row of data to move to."
        },
        "parameters": {
          "result": {
            "type": "query_result",
            "description": "Gets the next row available on a given `query_result`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "get_next_row",
          "self": "result",
          "static": "database"
        }
      },
      {
        "signature": "bool has_database(string name);",
        "name": "has_database",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a database loaded for the supplied name.\nThis checks against all databases loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_database` to load in a specific database and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns `true` if a database with the given `name` has\nhas been loaded."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Determines if SplashKit has a database loaded for the supplied name.\nThis checks against all databases loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_database` to load in a specific database and give\nit the desired name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "database"
        }
      },
      {
        "signature": "bool has_row(query_result result);",
        "name": "has_row",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a given `query_result` has a valid row of data.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `bool` which represents if there was a valid row of data."
        },
        "parameters": {
          "result": {
            "type": "query_result",
            "description": "Checks if a given `query_result` has a valid row of data.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "getter": "has_row",
          "self": "result",
          "static": "database"
        }
      },
      {
        "signature": "database open_database(string name,string filename);",
        "name": "open_database",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied `filename` is the name of the file of the database. The\nsupplied `name` indicates the name to use to refer to this `database`.\nThe `database` can then be retrieved by passing this `name` to\nthe `database_named` function.",
        "brief": "Loads or creates, and returns a database",
        "return": {
          "type": "database",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `database` with the initialised values provided."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The supplied `filename` is the name of the file of the database. The\nsupplied `name` indicates the name to use to refer to this `database`.\nThe `database` can then be retrieved by passing this `name` to\nthe `database_named` function.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "filename": {
            "type": "string",
            "description": "The supplied `filename` is the name of the file of the database. The\nsupplied `name` indicates the name to use to refer to this `database`.\nThe `database` can then be retrieved by passing this `name` to\nthe `database_named` function.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "database",
          "constructor": true,
          "static": "database"
        }
      },
      {
        "signature": "bool query_column_for_bool(query_result result,int col);",
        "name": "query_column_for_bool",
        "method_name": "query_column_for_bool",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for a bool.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `bool` which is the data at that column."
        },
        "parameters": {
          "result": {
            "type": "query_result",
            "description": "Queries a given column in the current row of the `query_result` for a bool.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "col": {
            "type": "int",
            "description": "Queries a given column in the current row of the `query_result` for a bool.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_column_for_bool",
          "self": "result",
          "static": "database"
        }
      },
      {
        "signature": "double query_column_for_double(query_result result,int col);",
        "name": "query_column_for_double",
        "method_name": "query_column_for_double",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for a double.",
        "brief": null,
        "return": {
          "type": "double",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `double` which is the data at that column."
        },
        "parameters": {
          "result": {
            "type": "query_result",
            "description": "Queries a given column in the current row of the `query_result` for a double.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "col": {
            "type": "int",
            "description": "Queries a given column in the current row of the `query_result` for a double.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_column_for_double",
          "self": "result",
          "static": "database"
        }
      },
      {
        "signature": "int query_column_for_int(query_result result,int col);",
        "name": "query_column_for_int",
        "method_name": "query_column_for_int",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for an integer.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `int` which is the data at that column."
        },
        "parameters": {
          "result": {
            "type": "query_result",
            "description": "Queries a given column in the current row of the `query_result` for an integer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "col": {
            "type": "int",
            "description": "Queries a given column in the current row of the `query_result` for an integer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_column_for_int",
          "self": "result",
          "static": "database"
        }
      },
      {
        "signature": "string query_column_for_string(query_result result,int col);",
        "name": "query_column_for_string",
        "method_name": "query_column_for_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for a string.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `string` which is the data at that column."
        },
        "parameters": {
          "result": {
            "type": "query_result",
            "description": "Queries a given column in the current row of the `query_result` for a string.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "col": {
            "type": "int",
            "description": "Queries a given column in the current row of the `query_result` for a string.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_column_for_string",
          "self": "result",
          "static": "database"
        }
      },
      {
        "signature": "bool query_success(query_result result);",
        "name": "query_success",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if the most recent query at the given `query_result` was a success or failure.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns whether or not the query was a success or failure represented as a `bool`."
        },
        "parameters": {
          "result": {
            "type": "query_result",
            "description": "Checks if the most recent query at the given `query_result` was a success or failure.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "getter": "successful",
          "static": "database"
        }
      },
      {
        "signature": "string query_type_of_col(query_result result,int col);",
        "name": "query_type_of_col",
        "method_name": "query_type_of_col",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for the data type at its postition.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `string` which is the name of the data type being stored.\n- Could return: `INTEGER`, `FLOAT`, `TEXT`, `NULL`."
        },
        "parameters": {
          "result": {
            "type": "query_result",
            "description": "Queries a given column in the current row of the `query_result` for the data type at its postition.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "col": {
            "type": "int",
            "description": "Queries a given column in the current row of the `query_result` for the data type at its postition.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_type_of_col",
          "self": "result",
          "static": "database"
        }
      },
      {
        "signature": "void reset_query_result(query_result result);",
        "name": "reset_query_result",
        "method_name": "reset",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resets a query_result back to its initial state, ready to be re-executed.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "result": {
            "type": "query_result",
            "description": "Resets a query_result back to its initial state, ready to be re-executed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "reset",
          "self": "result",
          "static": "database"
        }
      },
      {
        "signature": "int rows_changed(database db);",
        "name": "rows_changed",
        "method_name": "rows_changed",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the number of row changed in the database at the last time\na changing query was performed on the given database.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `int` which represents how many rows were changed\nin the database."
        },
        "parameters": {
          "db": {
            "type": "database",
            "description": "Calculates the number of row changed in the database at the last time\na changing query was performed on the given database.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "database",
          "method": "rows_changed",
          "self": "db",
          "static": "database"
        }
      },
      {
        "signature": "query_result run_sql(database db,string sql);",
        "name": "run_sql",
        "method_name": "run_sql",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `query_result` for the query passed into `sql`.",
        "brief": null,
        "return": {
          "type": "query_result",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `query_result` which represents\nthe result of perfoming `sql` on `db`."
        },
        "parameters": {
          "db": {
            "type": "database",
            "description": "Returns the `query_result` for the query passed into `sql`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "sql": {
            "type": "string",
            "description": "Returns the `query_result` for the query passed into `sql`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "database",
          "method": "run_sql",
          "self": "db",
          "static": "database"
        }
      },
      {
        "signature": "query_result run_sql(string database_name,string sql);",
        "name": "run_sql",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `query_result` for the query passed into `sql`.",
        "brief": null,
        "return": {
          "type": "query_result",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `query_result` which represents\nthe result of perfoming `sql` on the database at `database_name`."
        },
        "parameters": {
          "database_name": {
            "type": "string",
            "description": "Returns the `query_result` for the query passed into `sql`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "sql": {
            "type": "string",
            "description": "Returns the `query_result` for the query passed into `sql`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "unique": "run_sql_from_name",
          "static": "database"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct sk_database *database;",
        "name": "database",
        "description": "The `database` type is used to refer to databases that can be\nmanipulated by the SplashKit database code. Databases are:\n\n\n- opened with `open_database`,\n\n\n- and must be released using `free_database` (to release a specific\ndatabase) or `delete_all_databases` (to release all loaded\ndatabases).",
        "brief": null,
        "attributes": {
          "class": "database",
          "static": "database"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_query_result *query_result;",
        "name": "query_result",
        "description": "The `query_result` type is used to store the result of performing\na query on the database. It can:\n\n\n- show the success or failure of a query using `query_success`,\n\n\n- stores the data from queries which return data. This data is\naccessed using `query_column_for_bool`, `query_column_for_int`,\n`query_column_for_string` and `query_column_for_double`.",
        "brief": null,
        "attributes": {
          "class": "query_result",
          "static": "database"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "drawing_options": {
    "name": "drawing_options",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "ellipse_drawing": {
    "name": "ellipse_drawing",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "geometry": {
    "name": "geometry",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "float cosine(float degrees);",
        "name": "cosine",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the cosine of the supplied angle (in degrees).",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "degrees": {
            "type": "float",
            "description": "Returns the cosine of the supplied angle (in degrees).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "float sine(float degrees);",
        "name": "sine",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the sine of the supplied angle (in degrees).",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "degrees": {
            "type": "float",
            "description": "Returns the sine of the supplied angle (in degrees).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "float tangent(float degrees);",
        "name": "tangent",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the tangent of the supplied angle (in degrees).",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "degrees": {
            "type": "float",
            "description": "Returns the tangent of the supplied angle (in degrees).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "graphics": {
    "name": "graphics",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "void clear_screen(color clr);",
        "name": "clear_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Clears all open windows to the `clr` provided.",
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void refresh_screen();",
        "name": "refresh_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Refreshes the current drawing on all open windows.",
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "void refresh_screen(unsigned int target_fps);",
        "name": "refresh_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Refreshes all open windows with a target FPS (frames per second). This will\ndelay a period of time that will approximately meet the targeted frames per\nsecond.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "target_fps": {
            "type": "unsigned int",
            "description": "Refreshes all open windows with a target FPS (frames per second). This will\ndelay a period of time that will approximately meet the targeted frames per\nsecond.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "int screen_height();",
        "name": "screen_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "int screen_width();",
        "name": "screen_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "images": {
    "name": "images",
    "brief": "SplashKit Images allow drawing of bitmaps and sprites to graphic windows.",
    "description": null,
    "functions": [
      {
        "signature": "point_2d bitmap_cell_center(bitmap bmp);",
        "name": "bitmap_cell_center",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This returns a point that represents the center of a cell from this\nbitmap in local space.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A point in the center of a cell for this bitmap."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "This returns a point that represents the center of a cell from this\nbitmap in local space.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "circle bitmap_cell_circle(bitmap bmp,float x,float y);",
        "name": "bitmap_cell_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
        "brief": null,
        "return": {
          "type": "circle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A circle that will encompass the bitmap cell."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt);",
        "name": "bitmap_cell_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
        "brief": null,
        "return": {
          "type": "circle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A circle that will encompass the bitmap cell."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt,float scale);",
        "name": "bitmap_cell_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point, with the provided scale.",
        "brief": null,
        "return": {
          "type": "circle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A circle that will encompass the bitmap cell."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point, with the provided scale.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point, with the provided scale.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "scale": {
            "type": "float",
            "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point, with the provided scale.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "int bitmap_cell_columns(bitmap bmp);",
        "name": "bitmap_cell_columns",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of cell columns in the bitmap.\nThis is setup using `bitmap_set_cell_details`",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The number of cell columns"
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns the number of cell columns in the bitmap.\nThis is setup using `bitmap_set_cell_details`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "int bitmap_cell_count(bitmap bmp);",
        "name": "bitmap_cell_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of cells within the bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The number of individual cells within the bitmap."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns the number of cells within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "int bitmap_cell_height(bitmap bmp);",
        "name": "bitmap_cell_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of each cell in this bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The height of each cells in bmp"
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns the height of each cell in this bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "vector_2d bitmap_cell_offset(bitmap src,int cell);",
        "name": "bitmap_cell_offset",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that represents the movement needed to get to a given\ncell within a bitmap.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The offset needed to get to the cell from the top left of the bitmap."
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "Returns a vector that represents the movement needed to get to a given\ncell within a bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "cell": {
            "type": "int",
            "description": "Returns a vector that represents the movement needed to get to a given\ncell within a bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "rectangle bitmap_cell_rectangle(bitmap src);",
        "name": "bitmap_cell_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that will encompass a cell of the bitmap.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A rectangle with width and height from the bitmap's cell details."
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "Returns a rectangle that will encompass a cell of the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "rectangle bitmap_cell_rectangle(bitmap src,const point_2d &pt);",
        "name": "bitmap_cell_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A rectangle at pt, with width and height from the bitmap's cell details."
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "Returns a rectangle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Returns a rectangle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "int bitmap_cell_rows(bitmap bmp);",
        "name": "bitmap_cell_rows",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of rows of cells in the bitmap. These details are set in\n`bitmap_set_cell_details`.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The number of rows of cells in the bitmap."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns the number of rows of cells in the bitmap. These details are set in\n`bitmap_set_cell_details`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "int bitmap_cell_width(bitmap bmp);",
        "name": "bitmap_cell_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of each cell in this bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The width of each cells in bmp"
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns the width of each cell in this bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "point_2d bitmap_center(bitmap bmp);",
        "name": "bitmap_center",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This returns a point that represents the center of the bitmap in local\nspace.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A point in the center of the bitmap."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "This returns a point that represents the center of the bitmap in local\nspace.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "circle bitmap_circle(bitmap bmp,const point_2d &pt);",
        "name": "bitmap_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle that will encompass the entire bitamp.",
        "brief": null,
        "return": {
          "type": "circle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A circle that surrounds the bitmap."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns a circle that will encompass the entire bitamp.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Returns a circle that will encompass the entire bitamp.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "string bitmap_filename(bitmap bmp);",
        "name": "bitmap_filename",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the filename from which the bitmap was loaded. This will be an empty\nstring for created bitmaps.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "The file name of the bitmap."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns the filename from which the bitmap was loaded. This will be an empty\nstring for created bitmaps.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "int bitmap_height(bitmap bmp);",
        "name": "bitmap_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The height of the bitmap."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "int bitmap_height(string name);",
        "name": "bitmap_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The height of the bitmap."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "string bitmap_name(bitmap bmp);",
        "name": "bitmap_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the bitmap was loaded. This is the name you can use to\naccess this bitmap.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "The name of the bitmap."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns the name of the bitmap was loaded. This is the name you can use to\naccess this bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "bitmap bitmap_named(string name);",
        "name": "bitmap_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `bitmap` that has been loaded with the specified name,\nsee `load_bitmap`. This will attempt to load the bitmap if it has not\nbeen loaded.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "is_pointer": false,
          "is_reference": false,
          "description": "The bitmap with the name specified, which may refer to nothing\nif the bitmap has not been loaded."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Returns the `bitmap` that has been loaded with the specified name,\nsee `load_bitmap`. This will attempt to load the bitmap if it has not\nbeen loaded.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "void draw_bitmap(bitmap bmp,float x,float y);",
        "name": "draw_bitmap",
        "method_name": "draw",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the current window.\nat `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Draws the bitmap supplied into `bmp` to the current window.\nat `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Draws the bitmap supplied into `bmp` to the current window.\nat `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Draws the bitmap supplied into `bmp` to the current window.\nat `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw",
          "self": "bmp",
          "static": "images"
        }
      },
      {
        "signature": "void draw_bitmap(bitmap bmp,float x,float y,drawing_options opts);",
        "name": "draw_bitmap",
        "method_name": "draw",
        "unique_global_name": "draw_bitmap_with_options",
        "unique_method_name": "draw_with_options",
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Draws the bitmap supplied into `bmp` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Draws the bitmap supplied into `bmp` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Draws the bitmap supplied into `bmp` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "opts": {
            "type": "drawing_options",
            "description": "Draws the bitmap supplied into `bmp` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw",
          "self": "bmp",
          "suffix": "with_options",
          "static": "images"
        }
      },
      {
        "signature": "void draw_bitmap(string name,float x,float y);",
        "name": "draw_bitmap",
        "method_name": "draw_bitmap",
        "unique_global_name": "draw_bitmap_named",
        "unique_method_name": "draw_bitmap_named",
        "suffix_name": null,
        "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "method": "draw_bitmap",
          "suffix": "named",
          "static": "images"
        }
      },
      {
        "signature": "void draw_bitmap(string name,float x,float y,drawing_options opts);",
        "name": "draw_bitmap",
        "method_name": "draw_bitmap",
        "unique_global_name": "draw_bitmap_named_with_options",
        "unique_method_name": "draw_bitmap_named_with_options",
        "suffix_name": null,
        "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "opts": {
            "type": "drawing_options",
            "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "method": "draw_bitmap",
          "suffix": "named_with_options",
          "static": "images"
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,float x,float y);",
        "name": "pixel_drawn_at_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if the pixel at that point in the bitmap is drawn."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Check if the bitmap has a pixel drawn at the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Check if the bitmap has a pixel drawn at the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Check if the bitmap has a pixel drawn at the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,int cell,float x,float y);",
        "name": "pixel_drawn_at_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if the pixel at that point in the bitmap's cell is drawn."
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "cell": {
            "type": "int",
            "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "images"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "input": {
    "name": "input",
    "brief": "Input handles user interaction and events such as keypresses.",
    "description": null,
    "functions": [
      {
        "signature": "void process_events();",
        "name": "process_events",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "ProcessEvents allows SplashKit to react to user interactions. This\nprocedure checks the current keyboard and mouse states and should be\ncalled once within your game loop to check user interaction.\n\nSide Effects\n- Reads user interaction events\n- Updates keys down, text input, etc.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "static": "input"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "json": {
    "name": "json",
    "brief": "SplashKit Json allows you to create and read JSON objects.",
    "description": "Splashkit's JSON library allows you to easily create or read JSON objects and\nmanipulate them to/from a JSON string or from a file containing a JSON\nstring. Create a new JSON object with a call to `create_json()` and\nread or write data to it by calling methods like\n`json_add_string(json j, string key, string value)` and\n`json_read_string(json j, string key)`.",
    "functions": [
      {
        "signature": "json create_json();",
        "name": "create_json",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The empty `json` object returned can be filled with data and read by the\nfunctions and procedures prefixed with `json_add_` and `json_read_`",
        "brief": "Creates an empty `json` object.",
        "return": {
          "type": "json",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns an empty `json` object."
        },
        "parameters": {
        },
        "attributes": {
          "class": "json",
          "constructor": true,
          "static": "json"
        }
      },
      {
        "signature": "json create_json(string json_string);",
        "name": "create_json",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "`string json_string` must be valid JSON.\nThe `json` object returned can be filled with data and read by the functions\nand procedures prefixed with `json_add_` and `json_read_`",
        "brief": "Creates a `json` object filled with JSON fields from `json_string`.",
        "return": {
          "type": "json",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `json` object filled with data from the parameter `string`."
        },
        "parameters": {
          "json_string": {
            "type": "string",
            "description": "`string json_string` must be valid JSON.\nThe `json` object returned can be filled with data and read by the functions\nand procedures prefixed with `json_add_` and `json_read_`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "constructor": true,
          "static": "json"
        }
      },
      {
        "signature": "void free_all_json();",
        "name": "free_all_json",
        "method_name": "free_all",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the `json` objects which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all",
          "static": "json"
        }
      },
      {
        "signature": "void free_json(json j);",
        "name": "free_json",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the SplashKit resources associated with the `json` object.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Frees the SplashKit resources associated with the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "destructor": true,
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "void json_add_bool(json j,string key,bool value);",
        "name": "json_add_bool",
        "method_name": "add_bool",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a `bool` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Adds a `bool` value to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "key": {
            "type": "string",
            "description": "Adds a `bool` value to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "bool",
            "description": "Adds a `bool` value to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_bool",
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "void json_add_number(json j,string key,double value);",
        "name": "json_add_number",
        "method_name": "add_number",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a `double` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Adds a `double` value to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "key": {
            "type": "string",
            "description": "Adds a `double` value to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "double",
            "description": "Adds a `double` value to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_number",
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "void json_add_object(json j,string key,json object);",
        "name": "json_add_object",
        "method_name": "add_object",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a `json` object to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Adds a `json` object to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "key": {
            "type": "string",
            "description": "Adds a `json` object to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "object": {
            "type": "json",
            "description": "Adds a `json` object to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_object",
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "void json_add_string(json j,string key,string value);",
        "name": "json_add_string",
        "method_name": "add_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a `string` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Adds a `string` value to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "key": {
            "type": "string",
            "description": "Adds a `string` value to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "string",
            "description": "Adds a `string` value to the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_string",
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "json json_from_file(const string& filename);",
        "name": "json_from_file",
        "method_name": "from_file",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `json` object from a JSON string stored in `Resources/json/filename`\nand loads the data into the returned `json` object.",
        "brief": null,
        "return": {
          "type": "json",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `json` object loaded from the JSON file in `filename`."
        },
        "parameters": {
          "filename": {
            "type": "string",
            "description": "Reads a `json` object from a JSON string stored in `Resources/json/filename`\nand loads the data into the returned `json` object.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "method": "from_file",
          "static": "json"
        }
      },
      {
        "signature": "json json_from_string(const string &j_string);",
        "name": "json_from_string",
        "method_name": "from_json_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `json` object from a `string` in the JSON format.",
        "brief": null,
        "return": {
          "type": "json",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `json` object loaded with data from `string j_string`."
        },
        "parameters": {
          "j_string": {
            "type": "string",
            "description": "Reads a `json` object from a `string` in the JSON format.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "method": "from_json_string",
          "static": "json"
        }
      },
      {
        "signature": "bool json_has_key(json j,string key);",
        "name": "json_has_key",
        "method_name": "has_key",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if the `json` object contains the given `string` key.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns `true` if the `json j` object contains a key for `string` key."
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Checks if the `json` object contains the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "key": {
            "type": "string",
            "description": "Checks if the `json` object contains the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "method": "has_key",
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "bool json_read_bool(json j,string key);",
        "name": "json_read_bool",
        "method_name": "read_bool",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `bool` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `bool` value stored at the `string` key."
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Reads a `bool` value from the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "key": {
            "type": "string",
            "description": "Reads a `bool` value from the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_bool",
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "double json_read_number(json j,string key);",
        "name": "json_read_number",
        "method_name": "read_number",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `double` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "double",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `double` value stored at the `string` key."
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Reads a `double` value from the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "key": {
            "type": "string",
            "description": "Reads a `double` value from the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_number",
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "json json_read_object(json j,string key);",
        "name": "json_read_object",
        "method_name": "read_object",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `json` object value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "json",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `json` object value stored at the `string` key."
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Reads a `json` object value from the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "key": {
            "type": "string",
            "description": "Reads a `json` object value from the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_object",
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "string json_read_string(json j,string key);",
        "name": "json_read_string",
        "method_name": "read_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `string` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `string` value stored at the `string` key."
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Reads a `string` value from the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "key": {
            "type": "string",
            "description": "Reads a `string` value from the `json` object for the given `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_string",
          "self": "j",
          "static": "json"
        }
      },
      {
        "signature": "void json_to_file(json j,const string& filename);",
        "name": "json_to_file",
        "method_name": "to_file",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Writes the `json` object to a JSON string stored in `Resources/json/filename`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Writes the `json` object to a JSON string stored in `Resources/json/filename`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "filename": {
            "type": "string",
            "description": "Writes the `json` object to a JSON string stored in `Resources/json/filename`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "method": "to_file",
          "static": "json"
        }
      },
      {
        "signature": "string json_to_string(json j);",
        "name": "json_to_string",
        "method_name": "to_json_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts and returns the `json` object as a `string`.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `json` object as a `string`."
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "Converts and returns the `json` object as a `string`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "method": "to_json_string",
          "static": "json"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct sk_json *json;",
        "name": "json",
        "description": "The `json` type is used to refer to objects in the JSON format that can be\nmanipulated by the SplashKit `json` functions and procedures.\n\n\nAll `json` objects are:\n\n\n- created with `create_json()` or `create_json(string s)` or\n`json_from_string(string s)` or `json_from_file(json j)`\n\n\n- and must be released using `free_json()` (to release a specific `json object)\nor `free_all_json()` (to release all loaded `json objects).",
        "brief": null,
        "attributes": {
          "class": "json",
          "static": "json"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "keyboard_input": {
    "name": "keyboard_input",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "bool any_key_pressed();",
        "name": "any_key_pressed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks to see if any key has been pressed since the last time\n`process_events` was called.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "void deregister_callback_on_key_down(key_callback *callback);",
        "name": "deregister_callback_on_key_down",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the registered callback from receiving events related to key down actions.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "Remove the registered callback from receiving events related to key down actions.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void deregister_callback_on_key_typed(key_callback *callback);",
        "name": "deregister_callback_on_key_typed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the registered callback from receiving events related to key typed actions.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "Remove the registered callback from receiving events related to key typed actions.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void deregister_callback_on_key_up(key_callback *callback);",
        "name": "deregister_callback_on_key_up",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the registered callback from receiving events related to key up actions.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "Remove the registered callback from receiving events related to key up actions.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool key_down(key_code key);",
        "name": "key_down",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "Returns true when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string key_name(key_code key);",
        "name": "key_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The `key_name` function returns a string name for a given `key_code`. For\nexample, `COMMA_KEY` returns the string 'Comma'. This function could be used\nto display more meaningful key names for configuring game controls, etc.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The `key_name` function returns a string name for a given `key_code`. For\nexample, `COMMA_KEY` returns the string 'Comma'. This function could be used\nto display more meaningful key names for configuring game controls, etc.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool key_released(key_code key);",
        "name": "key_released",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the specified key was released since the last time\n`process_events` was called. This occurs only once for the key that is\nreleased and will not return true again until the key is pressed down and\nreleased again.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "Returns true if the specified key was released since the last time\n`process_events` was called. This occurs only once for the key that is\nreleased and will not return true again until the key is pressed down and\nreleased again.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool key_typed(key_code key);",
        "name": "key_typed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the key requested is just pressed down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked. this will only occur once for that key that is\npressed and will not return true again until the key is released and presssed down again",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "Returns true when the key requested is just pressed down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked. this will only occur once for that key that is\npressed and will not return true again until the key is released and presssed down again",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool key_up(key_code key);",
        "name": "key_up",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns false when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "Returns false when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void register_callback_on_key_down(key_callback *callback);",
        "name": "register_callback_on_key_down",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register the passed in callback function to receive notification of key down\ncalls. This will be called in response to `process_events`, for each key that\nthe user presses down.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "Register the passed in callback function to receive notification of key down\ncalls. This will be called in response to `process_events`, for each key that\nthe user presses down.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void register_callback_on_key_typed(key_callback *callback);",
        "name": "register_callback_on_key_typed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register the passed in callback function to receive notification of key typed\ncalls. This will be called in response to `process_events`, when the user initially\npresses a key down.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "Register the passed in callback function to receive notification of key typed\ncalls. This will be called in response to `process_events`, when the user initially\npresses a key down.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void register_callback_on_key_up(key_callback *callback);",
        "name": "register_callback_on_key_up",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register the passed in callback function to receive notification of key up\ncalls. This will be called in response to `process_events`, for each key that\nthe user releases.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "Register the passed in callback function to receive notification of key up\ncalls. This will be called in response to `process_events`, for each key that\nthe user releases.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef void (key_callback)(key_code code);",
        "name": "key_callback",
        "description": "The `key_callback` is a function pointer used to register your code with SplashKit\nor keyboard related events. See `register_callback_on_key_down`,\n`register_callback_on_key_up`, and `register_callback_on_key_typed`",
        "brief": null,
        "attributes": {
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "code": {
            "type": "key_code",
            "description": "The `key_callback` is a function pointer used to register your code with SplashKit\nor keyboard related events. See `register_callback_on_key_down`,\n`register_callback_on_key_up`, and `register_callback_on_key_typed`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        }
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum key_code {UNKNOWN_KEY = 0,BACKSPACE_KEY = 8,TAB_KEY = 9,CLEAR_KEY = 12,RETURN_KEY = 13,PAUSE_KEY = 19,ESCAPE_KEY = 27,SPACE_KEY = 32,EXCLAIM_KEY = 33,DOUBLE_QUOTE_KEY = 34,HASH_KEY = 35,DOLLAR_KEY = 36,AMPERSAND_KEY = 38,QUOTE_KEY = 39,LEFT_PAREN_KEY = 40,RIGHT_PAREN_KEY = 41,ASTERISK_KEY = 42,PLUS_KEY = 43,COMMA_KEY = 44,MINUS_KEY = 45,PERIOD_KEY = 46,SLASH_KEY = 47,NUM_0_KEY = 48,NUM_1_KEY = 49,NUM_2_KEY = 50,NUM_3_KEY = 51,NUM_4_KEY = 52,NUM_5_KEY = 53,NUM_6_KEY = 54,NUM_7_KEY = 55,NUM_8_KEY = 56,NUM_9_KEY = 57,COLON_KEY = 58,SEMI_COLON_KEY = 59,LESS_KEY = 60,EQUALS_KEY = 61,GREATER_KEY = 62,QUESTION_KEY = 63,AT_KEY = 64,LEFT_BRACKET_KEY = 91,BACKSLASH_KEY = 92,RIGHT_BRACKET_KEY = 93,CARET_KEY = 94,UNDERSCORE_KEY = 95,BACKQUOTE_KEY = 96,A_KEY = 97,B_KEY = 98,C_KEY = 99,D_KEY = 100,E_KEY = 101,F_KEY = 102,G_KEY = 103,H_KEY = 104,I_KEY = 105,J_KEY = 106,K_KEY = 107,L_KEY = 108,M_KEY = 109,N_KEY = 110,O_KEY = 111,P_KEY = 112,Q_KEY = 113,R_KEY = 114,S_KEY = 115,T_KEY = 116,U_KEY = 117,V_KEY = 118,W_KEY = 119,X_KEY = 120,Y_KEY = 121,Z_KEY = 122,DELETE_KEY = 127,KEYPAD_0 = 256,KEYPAD_1 = 257,KEYPAD_2 = 258,KEYPAD_3 = 259,KEYPAD_4 = 260,KEYPAD_5 = 261,KEYPAD_6 = 262,KEYPAD_7 = 263,KEYPAD_8 = 264,KEYPAD_9 = 265,KEYPAD_PERIOD = 266,KEYPAD_DIVIDE = 267,KEYPAD_MULTIPLY = 268,KEYPAD_MINUS = 269,KEYPAD_PLUS = 270,KEYPAD_ENTER = 271,KEYPAD_EQUALS = 272,UP_KEY = 273,DOWN_KEY = 274,RIGHT_KEY = 275,LEFT_KEY = 276,INSERT_KEY = 277,HOME_KEY = 278,END_KEY = 279,PAGE_UP_KEY = 280,PAGE_DOWN_KEY = 281,F1_KEY = 282,F2_KEY = 283,F3_KEY = 284,F4_KEY = 285,F5_KEY = 286,F6_KEY = 287,F7_KEY = 288,F8_KEY = 289,F9_KEY = 290,F10_KEY = 291,F11_KEY = 292,F12_KEY = 293,F13_KEY = 294,F14_KEY = 295,F15_KEY = 296,NUM_LOCK_KEY = 300,CAPS_LOCK_KEY = 301,SCROLL_LOCK_KEY = 302,RIGHT_SHIFT_KEY = 303,LEFT_SHIFT_KEY = 304,RIGHT_CTRL_KEY = 305,LEFT_CTRL_KEY = 306,RIGHT_ALT_KEY = 307,LEFT_ALT_KEY = 308,RIGHT_OPTION_KEY = 307,LEFT_OPTION_KEY = 308,LEFT_SUPER_KEY = 311,RIGHT_SUPER_KEY = 312,LEFT_WINDOWS_KEY = 311,RIGHT_WINDOWS_KEY = 312,LEFT_COMMAND_KEY = 311,RIGHT_COMMAND_KEY = 312,MODE_KEY = 313,HELP_KEY = 315,SYS_REQ_KEY = 317,MENU_KEY = 319,POWER_KEY = 320,};",
        "name": "key_code",
        "description": "These are the key codes you can use to check details of keyboard actions.\nSee `key_down`, `key_up`, `key_typed`, and `key_released` functions.\nYou can get a string representation of these keys using `key_name`.",
        "brief": null,
        "constants": {
          "UNKNOWN_KEY": {
            "number": 0
          },
          "BACKSPACE_KEY": {
            "number": 8
          },
          "TAB_KEY": {
            "number": 9
          },
          "CLEAR_KEY": {
            "number": 12
          },
          "RETURN_KEY": {
            "number": 13
          },
          "PAUSE_KEY": {
            "number": 19
          },
          "ESCAPE_KEY": {
            "number": 27
          },
          "SPACE_KEY": {
            "number": 32
          },
          "EXCLAIM_KEY": {
            "number": 33
          },
          "DOUBLE_QUOTE_KEY": {
            "number": 34
          },
          "HASH_KEY": {
            "number": 35
          },
          "DOLLAR_KEY": {
            "number": 36
          },
          "AMPERSAND_KEY": {
            "number": 38
          },
          "QUOTE_KEY": {
            "number": 39
          },
          "LEFT_PAREN_KEY": {
            "number": 40
          },
          "RIGHT_PAREN_KEY": {
            "number": 41
          },
          "ASTERISK_KEY": {
            "number": 42
          },
          "PLUS_KEY": {
            "number": 43
          },
          "COMMA_KEY": {
            "number": 44
          },
          "MINUS_KEY": {
            "number": 45
          },
          "PERIOD_KEY": {
            "number": 46
          },
          "SLASH_KEY": {
            "number": 47
          },
          "NUM_0_KEY": {
            "number": 48
          },
          "NUM_1_KEY": {
            "number": 49
          },
          "NUM_2_KEY": {
            "number": 50
          },
          "NUM_3_KEY": {
            "number": 51
          },
          "NUM_4_KEY": {
            "number": 52
          },
          "NUM_5_KEY": {
            "number": 53
          },
          "NUM_6_KEY": {
            "number": 54
          },
          "NUM_7_KEY": {
            "number": 55
          },
          "NUM_8_KEY": {
            "number": 56
          },
          "NUM_9_KEY": {
            "number": 57
          },
          "COLON_KEY": {
            "number": 58
          },
          "SEMI_COLON_KEY": {
            "number": 59
          },
          "LESS_KEY": {
            "number": 60
          },
          "EQUALS_KEY": {
            "number": 61
          },
          "GREATER_KEY": {
            "number": 62
          },
          "QUESTION_KEY": {
            "number": 63
          },
          "AT_KEY": {
            "number": 64
          },
          "LEFT_BRACKET_KEY": {
            "number": 91
          },
          "BACKSLASH_KEY": {
            "number": 92
          },
          "RIGHT_BRACKET_KEY": {
            "number": 93
          },
          "CARET_KEY": {
            "number": 94
          },
          "UNDERSCORE_KEY": {
            "number": 95
          },
          "BACKQUOTE_KEY": {
            "number": 96
          },
          "A_KEY": {
            "number": 97
          },
          "B_KEY": {
            "number": 98
          },
          "C_KEY": {
            "number": 99
          },
          "D_KEY": {
            "number": 100
          },
          "E_KEY": {
            "number": 101
          },
          "F_KEY": {
            "number": 102
          },
          "G_KEY": {
            "number": 103
          },
          "H_KEY": {
            "number": 104
          },
          "I_KEY": {
            "number": 105
          },
          "J_KEY": {
            "number": 106
          },
          "K_KEY": {
            "number": 107
          },
          "L_KEY": {
            "number": 108
          },
          "M_KEY": {
            "number": 109
          },
          "N_KEY": {
            "number": 110
          },
          "O_KEY": {
            "number": 111
          },
          "P_KEY": {
            "number": 112
          },
          "Q_KEY": {
            "number": 113
          },
          "R_KEY": {
            "number": 114
          },
          "S_KEY": {
            "number": 115
          },
          "T_KEY": {
            "number": 116
          },
          "U_KEY": {
            "number": 117
          },
          "V_KEY": {
            "number": 118
          },
          "W_KEY": {
            "number": 119
          },
          "X_KEY": {
            "number": 120
          },
          "Y_KEY": {
            "number": 121
          },
          "Z_KEY": {
            "number": 122
          },
          "DELETE_KEY": {
            "number": 127
          },
          "KEYPAD_0": {
            "number": 256
          },
          "KEYPAD_1": {
            "number": 257
          },
          "KEYPAD_2": {
            "number": 258
          },
          "KEYPAD_3": {
            "number": 259
          },
          "KEYPAD_4": {
            "number": 260
          },
          "KEYPAD_5": {
            "number": 261
          },
          "KEYPAD_6": {
            "number": 262
          },
          "KEYPAD_7": {
            "number": 263
          },
          "KEYPAD_8": {
            "number": 264
          },
          "KEYPAD_9": {
            "number": 265
          },
          "KEYPAD_PERIOD": {
            "number": 266
          },
          "KEYPAD_DIVIDE": {
            "number": 267
          },
          "KEYPAD_MULTIPLY": {
            "number": 268
          },
          "KEYPAD_MINUS": {
            "number": 269
          },
          "KEYPAD_PLUS": {
            "number": 270
          },
          "KEYPAD_ENTER": {
            "number": 271
          },
          "KEYPAD_EQUALS": {
            "number": 272
          },
          "UP_KEY": {
            "number": 273
          },
          "DOWN_KEY": {
            "number": 274
          },
          "RIGHT_KEY": {
            "number": 275
          },
          "LEFT_KEY": {
            "number": 276
          },
          "INSERT_KEY": {
            "number": 277
          },
          "HOME_KEY": {
            "number": 278
          },
          "END_KEY": {
            "number": 279
          },
          "PAGE_UP_KEY": {
            "number": 280
          },
          "PAGE_DOWN_KEY": {
            "number": 281
          },
          "F1_KEY": {
            "number": 282
          },
          "F2_KEY": {
            "number": 283
          },
          "F3_KEY": {
            "number": 284
          },
          "F4_KEY": {
            "number": 285
          },
          "F5_KEY": {
            "number": 286
          },
          "F6_KEY": {
            "number": 287
          },
          "F7_KEY": {
            "number": 288
          },
          "F8_KEY": {
            "number": 289
          },
          "F9_KEY": {
            "number": 290
          },
          "F10_KEY": {
            "number": 291
          },
          "F11_KEY": {
            "number": 292
          },
          "F12_KEY": {
            "number": 293
          },
          "F13_KEY": {
            "number": 294
          },
          "F14_KEY": {
            "number": 295
          },
          "F15_KEY": {
            "number": 296
          },
          "NUM_LOCK_KEY": {
            "number": 300
          },
          "CAPS_LOCK_KEY": {
            "number": 301
          },
          "SCROLL_LOCK_KEY": {
            "number": 302
          },
          "RIGHT_SHIFT_KEY": {
            "number": 303
          },
          "LEFT_SHIFT_KEY": {
            "number": 304
          },
          "RIGHT_CTRL_KEY": {
            "number": 305
          },
          "LEFT_CTRL_KEY": {
            "number": 306
          },
          "RIGHT_ALT_KEY": {
            "number": 307
          },
          "LEFT_ALT_KEY": {
            "number": 308
          },
          "RIGHT_OPTION_KEY": {
            "number": 307
          },
          "LEFT_OPTION_KEY": {
            "number": 308
          },
          "LEFT_SUPER_KEY": {
            "number": 311
          },
          "RIGHT_SUPER_KEY": {
            "number": 312
          },
          "LEFT_WINDOWS_KEY": {
            "number": 311
          },
          "RIGHT_WINDOWS_KEY": {
            "number": 312
          },
          "LEFT_COMMAND_KEY": {
            "number": 311
          },
          "RIGHT_COMMAND_KEY": {
            "number": 312
          },
          "MODE_KEY": {
            "number": 313
          },
          "HELP_KEY": {
            "number": 315
          },
          "SYS_REQ_KEY": {
            "number": 317
          },
          "MENU_KEY": {
            "number": 319
          },
          "POWER_KEY": {
            "number": 320
          }
        },
        "attributes": {
        }
      }
    ],
    "defines": [

    ]
  },
  "line_drawing": {
    "name": "line_drawing",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "line_geometry": {
    "name": "line_geometry",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "matrix_2d": {
    "name": "matrix_2d",
    "brief": "Provides matrix functions to work on 2d coordinates.",
    "description": null,
    "functions": [
      {
        "signature": "void apply_matrix(const matrix_2d &matrix,quad &q);",
        "name": "apply_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use a matrix to transform all of the points in a quad.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "matrix": {
            "type": "matrix_2d",
            "description": "Use a matrix to transform all of the points in a quad.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "q": {
            "type": "quad",
            "description": "Use a matrix to transform all of the points in a quad.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void apply_matrix(const matrix_2d &m,triangle &tri);",
        "name": "apply_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use a matrix to transform all of the points in a triangle.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "Use a matrix to transform all of the points in a triangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "tri": {
            "type": "triangle",
            "description": "Use a matrix to transform all of the points in a triangle.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "matrix_2d identity_matrix();",
        "name": "identity_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the identity matrix. When a matrix_2d or Vector is multiplied by\nthe identity matrix the result is the original matrix or vector.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "An identify matrix."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "matrix_2d matrix_inverse(const matrix_2d &m);",
        "name": "matrix_inverse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculate the inverse of a matrix.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A matrix that is the inverse of m"
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "Calculate the inverse of a matrix.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "point_2d matrix_multiply(const matrix_2d &m,const point_2d &pt);",
        "name": "matrix_multiply",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the `point_2d` parameter `v with the `matrix_2d` `m and\nreturns the result as a `point_2d`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new point, the result of applying the transformation to pt."
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "Multiplies the `point_2d` parameter `v with the `matrix_2d` `m and\nreturns the result as a `point_2d`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Multiplies the `point_2d` parameter `v with the `matrix_2d` `m and\nreturns the result as a `point_2d`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "matrix_2d matrix_multiply(const matrix_2d &m1,const matrix_2d &m2);",
        "name": "matrix_multiply",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the two `matrix_2d` parameters, ``m1`` by ``m2``, and returns\nthe result as a new `matrix_2d`. Use this to combine the effects to two\nmatrix transformations.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The result of multiplying m1 by m2"
        },
        "parameters": {
          "m1": {
            "type": "matrix_2d",
            "description": "Multiplies the two `matrix_2d` parameters, ``m1`` by ``m2``, and returns\nthe result as a new `matrix_2d`. Use this to combine the effects to two\nmatrix transformations.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "m2": {
            "type": "matrix_2d",
            "description": "Multiplies the two `matrix_2d` parameters, ``m1`` by ``m2``, and returns\nthe result as a new `matrix_2d`. Use this to combine the effects to two\nmatrix transformations.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d matrix_multiply(const matrix_2d &m,const vector_2d &v);",
        "name": "matrix_multiply",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the `Vector` parameter ``v`` with the `matrix_2d` ``m`` and\nreturns the result as a `Vector`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new vector, the result of applying the transformation to v."
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "Multiplies the `Vector` parameter ``v`` with the `matrix_2d` ``m`` and\nreturns the result as a `Vector`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "v": {
            "type": "vector_2d",
            "description": "Multiplies the `Vector` parameter ``v`` with the `matrix_2d` ``m`` and\nreturns the result as a `Vector`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string matrix_to_string(const matrix_2d &matrix);",
        "name": "matrix_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function returns a string representation of a Matrix.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "A string representation of the matrix."
        },
        "parameters": {
          "matrix": {
            "type": "matrix_2d",
            "description": "This function returns a string representation of a Matrix.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "matrix_2d rotation_matrix(float deg);",
        "name": "rotation_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rotation matrix that rotates 2d points by the angle.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A matrix that encodes the rotation by a number of degrees."
        },
        "parameters": {
          "deg": {
            "type": "float",
            "description": "Returns a rotation matrix that rotates 2d points by the angle.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "matrix_2d scale_matrix(const point_2d &scale);",
        "name": "scale_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a scale matrix that scales x and y to\ndifferent degrees.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A matrix that will scale points based on scale parameter."
        },
        "parameters": {
          "scale": {
            "type": "point_2d",
            "description": "Create a scale matrix that scales x and y to\ndifferent degrees.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "matrix_2d scale_matrix(float scale);",
        "name": "scale_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a matrix that can be used to scale 2d points (both x and y).",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A matrix to scale points by."
        },
        "parameters": {
          "scale": {
            "type": "float",
            "description": "Returns a matrix that can be used to scale 2d points (both x and y).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "matrix_2d scale_rotate_translate_matrix(const point_2d &scale,float deg,const point_2d &translate);",
        "name": "scale_rotate_translate_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a matrix that can scale, rotate then translate geometry points.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A matrix that will scale, rotate, and translate."
        },
        "parameters": {
          "scale": {
            "type": "point_2d",
            "description": "Create a matrix that can scale, rotate then translate geometry points.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "deg": {
            "type": "float",
            "description": "Create a matrix that can scale, rotate then translate geometry points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "translate": {
            "type": "point_2d",
            "description": "Create a matrix that can scale, rotate then translate geometry points.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "matrix_2d translation_matrix(const point_2d &pt);",
        "name": "translation_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a translation matric used to translate 2d points by the\ndistance in the point_2d.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A matrix that will move points by amount in pt"
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Returns a translation matric used to translate 2d points by the\ndistance in the point_2d.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "matrix_2d translation_matrix(float dx,float dy);",
        "name": "translation_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a matrix that can be used to translate 2d points. Moving them\nby dx and dy.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A matrix that will move points by dx, dy"
        },
        "parameters": {
          "dx": {
            "type": "float",
            "description": "Returns a matrix that can be used to translate 2d points. Moving them\nby dx and dy.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "dy": {
            "type": "float",
            "description": "Returns a matrix that can be used to translate 2d points. Moving them\nby dx and dy.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [
      {
        "signature": "struct matrix_2d {double elements[3][3];};",
        "name": "matrix_2d",
        "description": "In SwinGame, Matrices can be used to combine together a number of\noperations that need to be performed on Vectors. You can translate,\nrotate and scale, and combine these together into a single matrix\nthat can then be applied to vectors and points.",
        "brief": null,
        "fields": {
          "elements": {
            "type": "double",
            "description": "In SwinGame, Matrices can be used to combine together a number of\noperations that need to be performed on Vectors. You can translate,\nrotate and scale, and combine these together into a single matrix\nthat can then be applied to vectors and points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": true,
            "array_dimension_sizes": [
              3,
              3
            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "mouse_input": {
    "name": "mouse_input",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "void hide_mouse();",
        "name": "hide_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tells the mouse cursor to hide (no longer visible) if it is currently\nshowing. Use `ShowMouse` to make the mouse cursor visible again.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "bool mouse_clicked(mouse_button button);",
        "name": "mouse_clicked",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the specified button was clicked since the last time\n`ProcessEvents` was called",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "button": {
            "type": "mouse_button",
            "description": "Returns true if the specified button was clicked since the last time\n`ProcessEvents` was called",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool mouse_down(mouse_button button);",
        "name": "mouse_down",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns ``true`` if the specified button is currently pressed down.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "button": {
            "type": "mouse_button",
            "description": "Returns ``true`` if the specified button is currently pressed down.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d mouse_movement();",
        "name": "mouse_movement",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the amount of accumulated mouse movement, since the last time\n`ProcessEvents` was called, as a `Vector`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "point_2d mouse_position();",
        "name": "mouse_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current window position of the mouse as a `Point2D`",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d mouse_position_vector();",
        "name": "mouse_position_vector",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns The current window position of the mouse as a `Vector`",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "bool mouse_shown();",
        "name": "mouse_shown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns ``true`` if the mouse is currently visible, ``false`` if not.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "bool mouse_up(mouse_button button);",
        "name": "mouse_up",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns ``true`` if the specified button is currently up.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "button": {
            "type": "mouse_button",
            "description": "Returns ``true`` if the specified button is currently up.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d mouse_wheel_scroll();",
        "name": "mouse_wheel_scroll",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the amount the mouse wheel was scrolled since the last call\nto `ProcessEvents`. The result is a vector containing the x and y\namounts scrolled. Scroll left generates a negative x, scroll right a\npositive x. Scroll backward is negative y, scroll forward positive y.\nNote that on MacOS the directions may be inverted by OS settings.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "float mouse_x();",
        "name": "mouse_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current x value of the mouse's position.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "float mouse_y();",
        "name": "mouse_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current y value of the mouse's position.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "void move_mouse(float x,float y);",
        "name": "move_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Moves the mouse cursor to the specified screen location.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "Moves the mouse cursor to the specified screen location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Moves the mouse cursor to the specified screen location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void move_mouse(point_2d point);",
        "name": "move_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Moves the mouse cursor to the specified screen location.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "point": {
            "type": "point_2d",
            "description": "Moves the mouse cursor to the specified screen location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void show_mouse();",
        "name": "show_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tells the mouse cursor to be visible if it was previously hidden with\nby a `HideMouse` or `SetMouseVisible`(False) call.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "void show_mouse(bool show);",
        "name": "show_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Used to explicitly set the mouse cursors visible state (if it is showing\nin the window or not) based on the show parameter.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "show": {
            "type": "bool",
            "description": "Used to explicitly set the mouse cursors visible state (if it is showing\nin the window or not) based on the show parameter.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum mouse_button {NO_BUTTON,LEFT_BUTTON,MIDDLE_BUTTON,RIGHT_BUTTON,MOUSE_X1_BUTTON,MOUSE_X2_BUTTON};",
        "name": "mouse_button",
        "description": "A mouse can have many different types of buttons. Most people know\nabout the simple Left and Right buttons, but there is also a Middle\nbutton (sometimes part of a scoll wheel), and possible side buttons.",
        "brief": null,
        "constants": {
          "NO_BUTTON": {
          },
          "LEFT_BUTTON": {
          },
          "MIDDLE_BUTTON": {
          },
          "RIGHT_BUTTON": {
          },
          "MOUSE_X1_BUTTON": {
          },
          "MOUSE_X2_BUTTON": {
          }
        },
        "attributes": {
        }
      }
    ],
    "defines": [

    ]
  },
  "music": {
    "name": "music",
    "brief": "SplashKit Audio allows you to load and play music and sound effects.",
    "description": "The SplashKit`s audio library allows you to easily load and play music and\nsound effects within your programs. To get started with audio the first\nthing you need to do is load a sound effect or music file. You can do this\nby calling the `load_sound_effect(string name)` function to the\n`load_music(string name)` function.",
    "functions": [
      {
        "signature": "void fade_music_in(const string &name,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music file matching the name to full volume over a specified number of milliseconds",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Fades music file matching the name to full volume over a specified number of milliseconds",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "ms": {
            "type": "int",
            "description": "Fades music file matching the name to full volume over a specified number of milliseconds",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "static": "audio"
        }
      },
      {
        "signature": "void fade_music_in(const string &name,int times,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music file matching the name to full volume over a specified number of milliseconds\nand loops a specified number of times",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Fades music file matching the name to full volume over a specified number of milliseconds\nand loops a specified number of times",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "times": {
            "type": "int",
            "description": "Fades music file matching the name to full volume over a specified number of milliseconds\nand loops a specified number of times",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "ms": {
            "type": "int",
            "description": "Fades music file matching the name to full volume over a specified number of milliseconds\nand loops a specified number of times",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "static": "audio"
        }
      },
      {
        "signature": "void fade_music_in(music data,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music up to full volume over a specified number of milliseconds.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "Fades music up to full volume over a specified number of milliseconds.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "ms": {
            "type": "int",
            "description": "Fades music up to full volume over a specified number of milliseconds.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "self": "data",
          "static": "audio"
        }
      },
      {
        "signature": "void fade_music_in(music data,int times,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music up to full volume over a specified number of milliseconds\nfor a specified number of times.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "Fades music up to full volume over a specified number of milliseconds\nfor a specified number of times.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "times": {
            "type": "int",
            "description": "Fades music up to full volume over a specified number of milliseconds\nfor a specified number of times.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "ms": {
            "type": "int",
            "description": "Fades music up to full volume over a specified number of milliseconds\nfor a specified number of times.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "self": "data",
          "static": "audio"
        }
      },
      {
        "signature": "void fade_music_out(int ms);",
        "name": "fade_music_out",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music outover a specified number of milliseconds",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "ms": {
            "type": "int",
            "description": "Fades music outover a specified number of milliseconds",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void free_all_music();",
        "name": "free_all_music",
        "method_name": "free_all_music",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the music files that have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "music",
          "method": "free_all_music",
          "static": "audio"
        }
      },
      {
        "signature": "void free_music(music effect);",
        "name": "free_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases the SplashKit resources associated with music.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "effect": {
            "type": "music",
            "description": "Releases the SplashKit resources associated with music.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "destructor": true,
          "self": "effect",
          "static": "audio"
        }
      },
      {
        "signature": "bool has_music(const string &name);",
        "name": "has_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a music file loaded for the supplied name.\nThis checks against all music files loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_music` to load in a specific sound effect and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns `true` if there is a music file with the given `name` has\nhas been loaded."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Determines if SplashKit has a music file loaded for the supplied name.\nThis checks against all music files loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_music` to load in a specific sound effect and give\nit the desired name.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "music load_music(const string &name,const string &filename);",
        "name": "load_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads and returns a music value. The supplied `filename` is used to\nlocate the music file to load. The supplied `name` indicates the\nname to use to refer to this Music value. The `music` can then be\nretrieved by passing this `name` to the `music_named` function.",
        "brief": null,
        "return": {
          "type": "music",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Loads and returns a music value. The supplied `filename` is used to\nlocate the music file to load. The supplied `name` indicates the\nname to use to refer to this Music value. The `music` can then be\nretrieved by passing this `name` to the `music_named` function.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "filename": {
            "type": "string",
            "description": "Loads and returns a music value. The supplied `filename` is used to\nlocate the music file to load. The supplied `name` indicates the\nname to use to refer to this Music value. The `music` can then be\nretrieved by passing this `name` to the `music_named` function.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "constructor": true,
          "static": "audio"
        }
      },
      {
        "signature": "string music_filename(music data);",
        "name": "music_filename",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the filename the of the music data",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a string with the filename of the `music` file."
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "Returns the filename the of the music data",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "getter": "filename",
          "self": "data",
          "static": "audio"
        }
      },
      {
        "signature": "string music_name(music data);",
        "name": "music_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name that SplashKit uses to refer to this music data",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a string with the name of the `music` that SplashKit refers to."
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "Returns the name that SplashKit uses to refer to this music data",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "getter": "name",
          "self": "data",
          "static": "audio"
        }
      },
      {
        "signature": "music music_named(const string &name);",
        "name": "music_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retrieves a `music` that has been loaded into SplashKit.",
        "brief": null,
        "return": {
          "type": "music",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `music` that has been loaded with the specified\n`name` using `load_music`."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Retrieves a `music` that has been loaded into SplashKit.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "bool music_playing();",
        "name": "music_playing",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks whether music is currently playing.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns true or false value representing whether music is currently playing."
        },
        "parameters": {
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "float music_volume();",
        "name": "music_volume",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the volume of the currently playing `music`.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the percentage of the currently playing `music`."
        },
        "parameters": {
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void pause_music();",
        "name": "pause_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Pauses currently playing music - see resume_music to continue playing.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void play_music(const string &name);",
        "name": "play_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays the music file that matches the name once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Plays the music file that matches the name once at full volume.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void play_music(const string &name,int times);",
        "name": "play_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays the music file that matches the name a specified number of times at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Plays the music file that matches the name a specified number of times at full volume.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "times": {
            "type": "int",
            "description": "Plays the music file that matches the name a specified number of times at full volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void play_music(music data);",
        "name": "play_music",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a music file once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "Plays a music file once at full volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "method": "play",
          "self": "data",
          "static": "audio"
        }
      },
      {
        "signature": "void play_music(music data,int times);",
        "name": "play_music",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a music file a specified number of times at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "Plays a music file a specified number of times at full volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "times": {
            "type": "int",
            "description": "Plays a music file a specified number of times at full volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "method": "play",
          "self": "data",
          "static": "audio"
        }
      },
      {
        "signature": "void play_music(music data,int times,float volume);",
        "name": "play_music",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a music file for a specified number of times and playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "Plays a music file for a specified number of times and playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "times": {
            "type": "int",
            "description": "Plays a music file for a specified number of times and playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "volume": {
            "type": "float",
            "description": "Plays a music file for a specified number of times and playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "music",
          "method": "play",
          "self": "data",
          "static": "audio"
        }
      },
      {
        "signature": "void resume_music();",
        "name": "resume_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resumes currently paused music - see pause_music to pause playing music.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void set_music_volume(float volume);",
        "name": "set_music_volume",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the volume of the currently playing `music`. Must be between 0 and 1, e.g. 0.1 is 10%.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "volume": {
            "type": "float",
            "description": "Sets the volume of the currently playing `music`. Must be between 0 and 1, e.g. 0.1 is 10%.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void stop_music();",
        "name": "stop_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops currently playing music.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "static": "audio"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _music_data *music;",
        "name": "music",
        "description": "The Music type is used to refer to music that can be\nplayed by SplashKit. Music files are loaded with\n`LoadMusic`, played using `PlayMusic`, and must be\nreleased using `FreeMusic`.\n\nUnlike `SoundEffect`s, there can only be one Music track\nplaying at a time. Playing an new track will stop the currently\nplaying music and switch to the new track.",
        "brief": null,
        "attributes": {
          "class": "music",
          "static": "audio"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "networking": {
    "name": "networking",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "string dec_to_hex(unsigned int a_dec);",
        "name": "dec_to_hex",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts the supplied decimal integer into it's hexadecimal representation.\ne.g. 0x7F000001 from 2130706433",
        "brief": "Converts a decimal integer into a hexadecimal string",
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "hexadecimal representation of the supplied decimal integer"
        },
        "parameters": {
          "a_dec": {
            "type": "unsigned int",
            "description": "Converts the supplied decimal integer into it's hexadecimal representation.\ne.g. 0x7F000001 from 2130706433",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string hex_str_to_ipv4(const string &a_hex);",
        "name": "hex_str_to_ipv4",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied hexadecimal string is translated into ipv4 standard address string.\nFunction handles hex strings starting with or without 0x.\ne.g. 127.0.0.1 from 0x7F000001",
        "brief": "Converts a hexadecimal ipv4 string to standard ipv4 address string x.x.x.x",
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "standard ipv4 address using format X.X.X.X"
        },
        "parameters": {
          "a_hex": {
            "type": "string",
            "description": "The supplied hexadecimal string is translated into ipv4 standard address string.\nFunction handles hex strings starting with or without 0x.\ne.g. 127.0.0.1 from 0x7F000001",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string hex_to_dec_string(const string &a_hex);",
        "name": "hex_to_dec_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied hexadecimal string is converted into it's decimal representation\ne.g. 7F into 127",
        "brief": "Converts a hexadecimal string to a decimal string",
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "decimal representation of supplied hex string"
        },
        "parameters": {
          "a_hex": {
            "type": "string",
            "description": "The supplied hexadecimal string is converted into it's decimal representation\ne.g. 7F into 127",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "unsigned int ipv4_to_dec(const string &a_ip);",
        "name": "ipv4_to_dec",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Encodes the supplied ipv4 address string (in format X.X.X.X) into a single integer\ne.g. 127.0.0.1 into 2130706433",
        "brief": "Encodes ipv4 string into single integer",
        "return": {
          "type": "unsigned int",
          "is_pointer": false,
          "is_reference": false,
          "description": "encoded ipv4 string"
        },
        "parameters": {
          "a_ip": {
            "type": "string",
            "description": "Encodes the supplied ipv4 address string (in format X.X.X.X) into a single integer\ne.g. 127.0.0.1 into 2130706433",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string ipv4_to_hex(const string& a_ip);",
        "name": "ipv4_to_hex",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts an ipv4 address into it's hexadecimal representation\ne.g. 0x7F000001 from 127.0.0.1",
        "brief": "Converts an ipv4 address string to hex representation",
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "hexadecimal representation of ipc4 string"
        },
        "parameters": {
          "a_ip": {
            "type": "string",
            "description": "Converts an ipv4 address into it's hexadecimal representation\ne.g. 0x7F000001 from 127.0.0.1",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string ipv4_to_str(unsigned int ip);",
        "name": "ipv4_to_str",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Decodes the supplied unsigned 32 bit integer into it's ipv4 address form\ne.g. 2130706433 into 127.0.0.1",
        "brief": "Decodes an integer into it's ipv4 address representation",
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "ipv4 address string in X.X.X.X format"
        },
        "parameters": {
          "ip": {
            "type": "unsigned int",
            "description": "Decodes the supplied unsigned 32 bit integer into it's ipv4 address form\ne.g. 2130706433 into 127.0.0.1",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string my_ip();",
        "name": "my_ip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the ipv4 string of the localhost loopback for the current computer.",
        "brief": "Returns the ipv4 string for the current computer's ip",
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "ipv4 address string in X.X.X.X format"
        },
        "parameters": {
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "physics": {
    "name": "physics",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "point_drawing": {
    "name": "point_drawing",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "point_geometry": {
    "name": "point_geometry",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "point_2d point_at_origin();",
        "name": "point_at_origin",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a point representing the origin.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "bool point_in_circle(const point_2d &pt,const circle &c);",
        "name": "point_in_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the point `pt` is in the circle `c`.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Returns true if the point `pt` is in the circle `c`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "c": {
            "type": "circle",
            "description": "Returns true if the point `pt` is in the circle `c`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool point_in_quad(const point_2d &pt,const quad &q);",
        "name": "point_in_quad",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a point is in a quad.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if pt lies within the area of q."
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Tests if a point is in a quad.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "q": {
            "type": "quad",
            "description": "Tests if a point is in a quad.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool point_in_rectangle(const point_2d &pt,const rectangle &rect);",
        "name": "point_in_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if point `pt` is in the Rectangle `rect`.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Returns true if point `pt` is in the Rectangle `rect`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "rect": {
            "type": "rectangle",
            "description": "Returns true if point `pt` is in the Rectangle `rect`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool point_in_triangle(const point_2d &pt,const triangle &tri);",
        "name": "point_in_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the point `pt` is in the Triangle `tri`.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Returns true if the point `pt` is in the Triangle `tri`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "tri": {
            "type": "triangle",
            "description": "Returns true if the point `pt` is in the Triangle `tri`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "point_2d point_offset_by(const point_2d &start_point,const vector_2d &offset);",
        "name": "point_offset_by",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculate the `point_2d` that is offset from the `start_point` by the `offset`",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "start_point": {
            "type": "point_2d",
            "description": "Calculate the `point_2d` that is offset from the `start_point` by the `offset`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "offset": {
            "type": "vector_2d",
            "description": "Calculate the `point_2d` that is offset from the `start_point` by the `offset`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "point_2d point_offset_from_origin(const vector_2d &offset);",
        "name": "point_offset_from_origin",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the point offset from the origin by the provided vector.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "offset": {
            "type": "vector_2d",
            "description": "Returns the point offset from the origin by the provided vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool point_on_line(const point_2d &pt,const line &l);",
        "name": "point_on_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if point `pt` is on the line `l`.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Returns true if point `pt` is on the line `l`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "l": {
            "type": "line",
            "description": "Returns true if point `pt` is on the line `l`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool point_on_line(const point_2d &pt,const line &l,float proximity);",
        "name": "point_on_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the point `pt` is on the line `l`. The\nproximity value is used to set the sensitivity -- higher values\neffectively make the line thicker.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Returns true when the point `pt` is on the line `l`. The\nproximity value is used to set the sensitivity -- higher values\neffectively make the line thicker.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "l": {
            "type": "line",
            "description": "Returns true when the point `pt` is on the line `l`. The\nproximity value is used to set the sensitivity -- higher values\neffectively make the line thicker.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "proximity": {
            "type": "float",
            "description": "Returns true when the point `pt` is on the line `l`. The\nproximity value is used to set the sensitivity -- higher values\neffectively make the line thicker.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "float point_point_angle(const point_2d &pt1,const point_2d &pt2);",
        "name": "point_point_angle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the angle between two points in degrees.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "Returns the angle between two points in degrees.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt2": {
            "type": "point_2d",
            "description": "Returns the angle between two points in degrees.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "float point_point_distance(const point_2d &pt1,const point_2d pt2);",
        "name": "point_point_distance",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the distance between two points.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "Returns the distance between two points.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt2": {
            "type": "point_2d",
            "description": "Returns the distance between two points.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string point_to_string(const point_2d &pt);",
        "name": "point_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a text description of the `point_2d`.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Get a text description of the `point_2d`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "point_2d random_bitmap_point(bitmap bmp);",
        "name": "random_bitmap_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a random point within the bounds of the bitmap.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "Returns a random point within the bounds of the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "point_2d random_screen_point();",
        "name": "random_screen_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a random point on the current window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "point_2d random_window_point(window wind);",
        "name": "random_window_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a random point on the provided window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "Returns a random point on the provided window.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool same_point(const point_2d &pt1,const point_2d &pt2);",
        "name": "same_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns True of `pt1` is at the same point as `pt2`.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "Returns True of `pt1` is at the same point as `pt2`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt2": {
            "type": "point_2d",
            "description": "Returns True of `pt1` is at the same point as `pt2`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "quad_geometry": {
    "name": "quad_geometry",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "quad quad_from(const rectangle &rect,const matrix_2d &transform);",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad from the rectangle, then applies the transformation to\nthe quads points.",
        "brief": null,
        "return": {
          "type": "quad",
          "is_pointer": false,
          "is_reference": false,
          "description": "A quad that represents the rectangle after the transformation."
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "Returns a quad from the rectangle, then applies the transformation to\nthe quads points.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "transform": {
            "type": "matrix_2d",
            "description": "Returns a quad from the rectangle, then applies the transformation to\nthe quads points.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "quad quad_from(const rectangle &rect);",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad from the x-y points of a given recatangle",
        "brief": null,
        "return": {
          "type": "quad",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "Returns a quad from the x-y points of a given recatangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "quad quad_from(float x_top_left,float y_top_left,float x_top_right,float y_top_right,float x_bottom_left,float y_bottom_left,float x_bottom_right,float y_bottom_right );",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad for the passed in x & y points.",
        "brief": null,
        "return": {
          "type": "quad",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "x_top_left": {
            "type": "float",
            "description": "Returns a quad for the passed in x & y points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y_top_left": {
            "type": "float",
            "description": "Returns a quad for the passed in x & y points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x_top_right": {
            "type": "float",
            "description": "Returns a quad for the passed in x & y points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y_top_right": {
            "type": "float",
            "description": "Returns a quad for the passed in x & y points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x_bottom_left": {
            "type": "float",
            "description": "Returns a quad for the passed in x & y points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y_bottom_left": {
            "type": "float",
            "description": "Returns a quad for the passed in x & y points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x_bottom_right": {
            "type": "float",
            "description": "Returns a quad for the passed in x & y points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y_bottom_right": {
            "type": "float",
            "description": "Returns a quad for the passed in x & y points.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "random": {
    "name": "random",
    "brief": "SplashKit random provides a simple implementation of random.",
    "description": "The SplashKit`s random library provides two rnd methods, a `rnd()` which generates\na random number between 0 and 1, and `rnd(int ubound)` which\ngenerates a random number between 0 and the value scpeficied in `ubound`.",
    "functions": [
      {
        "signature": "float rnd();",
        "name": "rnd",
        "method_name": "rnd",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a random number between 0 and 1",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `float` between `0` and `1`"
        },
        "parameters": {
        },
        "attributes": {
          "class": "random",
          "method": "rnd",
          "static": "random"
        }
      },
      {
        "signature": "int rnd(int ubound);",
        "name": "rnd",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a random number between 0 and `ubound`.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns an `int` between `0` and `ubound`"
        },
        "parameters": {
          "ubound": {
            "type": "int",
            "description": "Generates a random number between 0 and `ubound`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "random",
          "static": "random"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "rectangle_drawing": {
    "name": "rectangle_drawing",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "rectangle_geometry": {
    "name": "rectangle_geometry",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "rectangle intersection(const rectangle &rect1,const rectangle &rect2);",
        "name": "intersection",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that represents the intersection of two rectangles.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "The intersection of rect1 and rect2."
        },
        "parameters": {
          "rect1": {
            "type": "rectangle",
            "description": "Returns a rectangle that represents the intersection of two rectangles.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "rect2": {
            "type": "rectangle",
            "description": "Returns a rectangle that represents the intersection of two rectangles.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "rectangle rectangle_around(const triangle &t);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given triangle",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "t": {
            "type": "triangle",
            "description": "Returns a rectangle that surrounds a given triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "rectangle rectangle_around(const circle &c);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given circle",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "Returns a rectangle that surrounds a given circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "rectangle rectangle_around(const line &l);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given line segment",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "Returns a rectangle that surrounds a given line segment",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "point_2d rectangle_center(const rectangle &rect);",
        "name": "rectangle_center",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of a given rectangle",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "Returns the center point of a given rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "rectangle rectangle_from(const point_2d pt,const float width,const float height);",
        "name": "rectangle_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle at the specified point with a given width and height",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Returns a rectangle at the specified point with a given width and height",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "width": {
            "type": "float",
            "description": "Returns a rectangle at the specified point with a given width and height",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "height": {
            "type": "float",
            "description": "Returns a rectangle at the specified point with a given width and height",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "rectangle rectangle_from(const point_2d pt1,const point_2d pt2);",
        "name": "rectangle_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle with pt1 and pt2 defining the two distant edge points.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "Returns a rectangle with pt1 and pt2 defining the two distant edge points.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt2": {
            "type": "point_2d",
            "description": "Returns a rectangle with pt1 and pt2 defining the two distant edge points.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "rectangle rectangle_from(float x,float y,float width,float height);",
        "name": "rectangle_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle from a given x,y location with the specified width\nand height.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "Returns a rectangle from a given x,y location with the specified width\nand height.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Returns a rectangle from a given x,y location with the specified width\nand height.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "width": {
            "type": "float",
            "description": "Returns a rectangle from a given x,y location with the specified width\nand height.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "height": {
            "type": "float",
            "description": "Returns a rectangle from a given x,y location with the specified width\nand height.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "rectangle rectangle_offset_by(const rectangle &rect,const vector_2d &offset);",
        "name": "rectangle_offset_by",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that is moved by the provided vector.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "Returns a rectangle that is moved by the provided vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "offset": {
            "type": "vector_2d",
            "description": "Returns a rectangle that is moved by the provided vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string rectangle_to_string(const rectangle &rect);",
        "name": "rectangle_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a text representation of the passed in rectangle.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "Get a text representation of the passed in rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool rectangles_intersect(const rectangle &rect1,const rectangle &rect2);",
        "name": "rectangles_intersect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the two rectangles intersect.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True when rect1 and rect2 intersect."
        },
        "parameters": {
          "rect1": {
            "type": "rectangle",
            "description": "Returns true if the two rectangles intersect.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "rect2": {
            "type": "rectangle",
            "description": "Returns true if the two rectangles intersect.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "resources": {
    "name": "resources",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum resource_kind {SOUND_RESOURCE,MUSIC_RESOURCE,ANIMATION_RESOURCE,BUNDLE_RESOURCE,DATABASE_RESOURCE,IMAGE_RESOURCE,FONT_RESOURCE,TIMER_RESOURCE,JSON_RESOURCE,OTHER_RESOURCE};",
        "name": "resource_kind",
        "description": null,
        "brief": null,
        "constants": {
          "SOUND_RESOURCE": {
          },
          "MUSIC_RESOURCE": {
          },
          "ANIMATION_RESOURCE": {
          },
          "BUNDLE_RESOURCE": {
          },
          "DATABASE_RESOURCE": {
          },
          "IMAGE_RESOURCE": {
          },
          "FONT_RESOURCE": {
          },
          "TIMER_RESOURCE": {
          },
          "JSON_RESOURCE": {
          },
          "OTHER_RESOURCE": {
          }
        },
        "attributes": {
        }
      }
    ],
    "defines": [

    ]
  },
  "sound": {
    "name": "sound",
    "brief": "SplashKit Audio allows you to load and play sound effects.",
    "description": null,
    "functions": [
      {
        "signature": "void fade_all_sound_effects_out(int ms);",
        "name": "fade_all_sound_effects_out",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades out all `sound_effect`s over the specified milliseconds.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "ms": {
            "type": "int",
            "description": "Fades out all `sound_effect`s over the specified milliseconds.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void fade_sound_effect_out(sound_effect effect,int ms);",
        "name": "fade_sound_effect_out",
        "method_name": "fade_out",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades out the `sound_effect` over the specified milliseconds.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "Fades out the `sound_effect` over the specified milliseconds.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "ms": {
            "type": "int",
            "description": "Fades out the `sound_effect` over the specified milliseconds.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "fade_out",
          "self": "effect",
          "static": "audio"
        }
      },
      {
        "signature": "void free_all_sound_effects();",
        "name": "free_all_sound_effects",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the sound effects that have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "void free_sound_effect(sound_effect effect);",
        "name": "free_sound_effect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases the SplashKit resources associated with the sound effect.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "Releases the SplashKit resources associated with the sound effect.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "destructor": true,
          "self": "effect",
          "static": "audio"
        }
      },
      {
        "signature": "bool has_sound_effect(const string &name);",
        "name": "has_sound_effect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a sound effect loaded for the supplied name.\nThis checks against all sounds loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_sound_effect` to load in a specific sound effect and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns `true` if there is a sound effect with the given `name` has\nhas been loaded."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Determines if SplashKit has a sound effect loaded for the supplied name.\nThis checks against all sounds loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_sound_effect` to load in a specific sound effect and give\nit the desired name.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "sound_effect load_sound_effect(const string &name,const string &filename);",
        "name": "load_sound_effect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied `filename` is used to locate the sound effect to load. The\nsupplied `name` indicates the name to use to refer to this `sound_effect`.\nThe `sound_effect` can then be retrieved by passing this `name` to\nthe `sound_effect_named` function.",
        "brief": "Loads and returns a sound effect.",
        "return": {
          "type": "sound_effect",
          "is_pointer": false,
          "is_reference": false,
          "description": "A new `sound_effect` with the initialised values provided."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The supplied `filename` is used to locate the sound effect to load. The\nsupplied `name` indicates the name to use to refer to this `sound_effect`.\nThe `sound_effect` can then be retrieved by passing this `name` to\nthe `sound_effect_named` function.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "filename": {
            "type": "string",
            "description": "The supplied `filename` is used to locate the sound effect to load. The\nsupplied `name` indicates the name to use to refer to this `sound_effect`.\nThe `sound_effect` can then be retrieved by passing this `name` to\nthe `sound_effect_named` function.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "constructor": true,
          "static": "audio"
        }
      },
      {
        "signature": "void play_sound_effect(const string &name);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Plays a sound effect once at full volume.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "static": "audio"
        }
      },
      {
        "signature": "void play_sound_effect(const string &name,float volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Plays a sound effect once at full volume.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "volume": {
            "type": "float",
            "description": "Plays a sound effect once at full volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "static": "audio"
        }
      },
      {
        "signature": "void play_sound_effect(const string &name,int times);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect for a specified number of times at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Plays a sound effect for a specified number of times at full volume.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "times": {
            "type": "int",
            "description": "Plays a sound effect for a specified number of times at full volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "static": "audio"
        }
      },
      {
        "signature": "void play_sound_effect(const string &name,int times,float volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect for a specified number of times and playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Plays a sound effect for a specified number of times and playback volume.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "times": {
            "type": "int",
            "description": "Plays a sound effect for a specified number of times and playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "volume": {
            "type": "float",
            "description": "Plays a sound effect for a specified number of times and playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "static": "audio"
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "Plays a sound effect once at full volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "static": "audio"
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect,float volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "Plays a sound effect once at playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "volume": {
            "type": "float",
            "description": "Plays a sound effect once at playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "static": "audio"
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect,int times);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "Plays a sound effect once at full volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "times": {
            "type": "int",
            "description": "Plays a sound effect once at full volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "static": "audio"
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect,int times,float volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": "play_sound_effect_with_loops_and_volume",
        "unique_method_name": "play_with_loops_and_volume",
        "suffix_name": null,
        "description": "This version of `play_sound_effect` allows you to control both the number\nof times the `sound_effect` is repeated and its playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "This version of `play_sound_effect` allows you to control both the number\nof times the `sound_effect` is repeated and its playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "times": {
            "type": "int",
            "description": "This version of `play_sound_effect` allows you to control both the number\nof times the `sound_effect` is repeated and its playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "volume": {
            "type": "float",
            "description": "This version of `play_sound_effect` allows you to control both the number\nof times the `sound_effect` is repeated and its playback volume.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "suffix": "with_loops_and_volume",
          "static": "audio"
        }
      },
      {
        "signature": "string sound_effect_filename(sound_effect effect);",
        "name": "sound_effect_filename",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the filename of the `sound_effect` that has been loaded by SplashKit",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the filename of the `sound_effect` that has been loaded"
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "Returns the filename of the `sound_effect` that has been loaded by SplashKit",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "filename",
          "self": "effect",
          "static": "audio"
        }
      },
      {
        "signature": "string sound_effect_name(sound_effect effect);",
        "name": "sound_effect_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the `sound_effect` that has been loaded by SplashKit",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the name of the `sound_effect` that has been loaded"
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "Returns the name of the `sound_effect` that has been loaded by SplashKit",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "name",
          "self": "effect",
          "static": "audio"
        }
      },
      {
        "signature": "sound_effect sound_effect_named(const string &name);",
        "name": "sound_effect_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retrieves a `sound_effect` that has been loaded into SplashKit. If the\nsound effect has not been loaded, this will attempt to use the name to\nlocate the file for you. If a file can be found, the sound effect is loaded\nand returned.",
        "brief": null,
        "return": {
          "type": "sound_effect",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the `sound_effect` that has been loaded with the specified\n`name` using `load_sound_effect`."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Retrieves a `sound_effect` that has been loaded into SplashKit. If the\nsound effect has not been loaded, this will attempt to use the name to\nlocate the file for you. If a file can be found, the sound effect is loaded\nand returned.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "audio"
        }
      },
      {
        "signature": "bool sound_effect_playing(const string &name);",
        "name": "sound_effect_playing",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks whether the `sound_effect` that matches the name is currently playing",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns whether the \"sound_effect\" that matches the name is currently playing or not"
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Checks whether the `sound_effect` that matches the name is currently playing",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "is_playing",
          "static": "audio"
        }
      },
      {
        "signature": "bool sound_effect_playing(sound_effect effect);",
        "name": "sound_effect_playing",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks whether the `sound_effect` is currently playing",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns whether the \"sound_effect\" is currently playing or not"
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "Checks whether the `sound_effect` is currently playing",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "filename",
          "self": "effect",
          "static": "audio"
        }
      },
      {
        "signature": "void stop_sound_effect(const string &name);",
        "name": "stop_sound_effect",
        "method_name": "stop",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops the `sound_effect` that matches the name, if it is currently playing.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Stops the `sound_effect` that matches the name, if it is currently playing.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "stop",
          "static": "audio"
        }
      },
      {
        "signature": "void stop_sound_effect(sound_effect effect);",
        "name": "stop_sound_effect",
        "method_name": "stop",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops the `sound_effect` if it is currently playing",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "Stops the `sound_effect` if it is currently playing",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "stop",
          "self": "effect",
          "static": "audio"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _sound_data *sound_effect;",
        "name": "sound_effect",
        "description": "The `sound_effect` type is used to refer to sound effects that can be\nplayed by the SplashKit audio code. Sound effects are:\n\n- loaded with `load_sound_effect`,\n\n- played using `play_sound_effect`,\n\n- and must be released using `delete_sound_effect` (to release a specific\nsound effect) or `delete_all_sound_effects` (to release all loaded\nsound effects).\n\nSplashKit will mix the audio from multiple sound effects, making it\npossible to play multiple `sound_effect`s, or even to play the one\n`sound_effect` multiple times.\n\nYou can check if a `sound_effect` is currently playing using\n`sound_effect_playing`.\n\nTo stop a `sound_effect` playing use `stop_sound_effect`. This will stop all\ninstances of this one sound effect from playing.\n\nUse `music` for background music for your games.",
        "brief": null,
        "attributes": {
          "class": "sound_effect",
          "static": "audio"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "sprites": {
    "name": "sprites",
    "brief": "SplashKit Sprites allows you to create images you can easily\nmove and animate.",
    "description": "SplashKit sprites are game elements that can be moved, and animated. Sprites\nare located at a position in the game, have a velocity, and an animation.\nThe sprite can also have arbitary data associated with it for game specific\npurposes.",
    "functions": [
      {
        "signature": "void call_for_all_sprites(sprite_float_function *fn,float val);",
        "name": "call_for_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Call the supplied function for all sprites in the current pack.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "fn": {
            "type": "sprite_float_function",
            "description": "Call the supplied function for all sprites in the current pack.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "val": {
            "type": "float",
            "description": "Call the supplied function for all sprites in the current pack.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void call_for_all_sprites(sprite_function *fn);",
        "name": "call_for_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Call the supplied function for all sprites in the current pack.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "fn": {
            "type": "sprite_function",
            "description": "Call the supplied function for all sprites in the current pack.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void call_on_sprite_event(sprite_event_handler *handler);",
        "name": "call_on_sprite_event",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register a procedure to be called when an events occur on any sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "handler": {
            "type": "sprite_event_handler",
            "description": "Register a procedure to be called when an events occur on any sprite.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "point_2d center_point(sprite s);",
        "name": "center_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of the passed in sprite. This is based on the sprite's\nPosition, Width and Height.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the center point of the passed in sprite. This is based on the sprite's\nPosition, Width and Height.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "center_point"
        }
      },
      {
        "signature": "sprite create_sprite(bitmap layer);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
        "brief": null,
        "return": {
          "type": "sprite",
          "is_pointer": false,
          "is_reference": false,
          "description": "The new sprite with image."
        },
        "parameters": {
          "layer": {
            "type": "bitmap",
            "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true
        }
      },
      {
        "signature": "sprite create_sprite(bitmap layer,animation_script ani);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\nThis version of `create_sprite` will initialise the sprite to use\npixel level collisions, the specified animation template, the layer have\nname 'layer1'.\n\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
        "brief": null,
        "return": {
          "type": "sprite",
          "is_pointer": false,
          "is_reference": false,
          "description": "The new sprite with image and animation script."
        },
        "parameters": {
          "layer": {
            "type": "bitmap",
            "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\nThis version of `create_sprite` will initialise the sprite to use\npixel level collisions, the specified animation template, the layer have\nname 'layer1'.\n\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "ani": {
            "type": "animation_script",
            "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\nThis version of `create_sprite` will initialise the sprite to use\npixel level collisions, the specified animation template, the layer have\nname 'layer1'.\n\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true
        }
      },
      {
        "signature": "sprite create_sprite(const string &bitmap_name);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
        "brief": null,
        "return": {
          "type": "sprite",
          "is_pointer": false,
          "is_reference": false,
          "description": "The new sprite with image."
        },
        "parameters": {
          "bitmap_name": {
            "type": "string",
            "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true
        }
      },
      {
        "signature": "sprite create_sprite(const string &name,bitmap layer);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the sprite if it is animated at a later stage.\nThis version of create_sprite will initialise the sprite to use pixel level\ncollisions, no animation, the layer have name 'layer1'.",
        "brief": null,
        "return": {
          "type": "sprite",
          "is_pointer": false,
          "is_reference": false,
          "description": "The new sprite with image and name."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the sprite if it is animated at a later stage.\nThis version of create_sprite will initialise the sprite to use pixel level\ncollisions, no animation, the layer have name 'layer1'.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "layer": {
            "type": "bitmap",
            "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the sprite if it is animated at a later stage.\nThis version of create_sprite will initialise the sprite to use pixel level\ncollisions, no animation, the layer have name 'layer1'.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true
        }
      },
      {
        "signature": "sprite create_sprite(const string &name,bitmap layer,animation_script ani);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the cell\ninformation within the sprite if it is animated at a later stage. This\nversion of create_sprite will initialise the sprite to use pixel level\ncollisions, the specified animation template, the layer have name 'layer1'.",
        "brief": null,
        "return": {
          "type": "sprite",
          "is_pointer": false,
          "is_reference": false,
          "description": "The new sprite with image, animation, and name."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Creates a sprite for the passed in bitmap image. The sprite will use the cell\ninformation within the sprite if it is animated at a later stage. This\nversion of create_sprite will initialise the sprite to use pixel level\ncollisions, the specified animation template, the layer have name 'layer1'.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "layer": {
            "type": "bitmap",
            "description": "Creates a sprite for the passed in bitmap image. The sprite will use the cell\ninformation within the sprite if it is animated at a later stage. This\nversion of create_sprite will initialise the sprite to use pixel level\ncollisions, the specified animation template, the layer have name 'layer1'.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "ani": {
            "type": "animation_script",
            "description": "Creates a sprite for the passed in bitmap image. The sprite will use the cell\ninformation within the sprite if it is animated at a later stage. This\nversion of create_sprite will initialise the sprite to use pixel level\ncollisions, the specified animation template, the layer have name 'layer1'.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true
        }
      },
      {
        "signature": "sprite create_sprite(const string &bitmap_name,const string &animation_name);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite. The bitmap_name is used to indicate the bitmap the sprite\nwill use, and the animation_name is used to indicate which animation_script\nto use.",
        "brief": null,
        "return": {
          "type": "sprite",
          "is_pointer": false,
          "is_reference": false,
          "description": "The new sprite with the image and animation."
        },
        "parameters": {
          "bitmap_name": {
            "type": "string",
            "description": "Creates a sprite. The bitmap_name is used to indicate the bitmap the sprite\nwill use, and the animation_name is used to indicate which animation_script\nto use.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "animation_name": {
            "type": "string",
            "description": "Creates a sprite. The bitmap_name is used to indicate the bitmap the sprite\nwill use, and the animation_name is used to indicate which animation_script\nto use.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true
        }
      },
      {
        "signature": "void create_sprite_pack(const string &name);",
        "name": "create_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a new sprite_pack with a given name. This pack can then be\nselected and used to control which sprites are drawn/updated in\nthe calls to draw_all_sprites and update_all_sprites.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Create a new sprite_pack with a given name. This pack can then be\nselected and used to control which sprites are drawn/updated in\nthe calls to draw_all_sprites and update_all_sprites.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string current_sprite_pack();",
        "name": "current_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the currently selected sprite_pack.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "The name of the current sprite pack."
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "void draw_all_sprites();",
        "name": "draw_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "draws all of the sprites in the current sprite pack. Packs can be\nswitched to select between different sets of sprites.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "void draw_sprite(sprite s,const point_2d &position);",
        "name": "draw_sprite",
        "method_name": "draw",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard ''draw_sprite'' routine.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard ''draw_sprite'' routine.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "position": {
            "type": "point_2d",
            "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard ''draw_sprite'' routine.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "draw",
          "unique": "draw_offsetpoint"
        }
      },
      {
        "signature": "void draw_sprite(sprite s);",
        "name": "draw_sprite",
        "method_name": "draw",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws the sprite at its location in the world. This is affected by the\nposition of the camera and the sprites current location.\n\nThis is the standard routine for drawing sprites to the screen and should be\nused in most cases.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Draws the sprite at its location in the world. This is affected by the\nposition of the camera and the sprites current location.\n\nThis is the standard routine for drawing sprites to the screen and should be\nused in most cases.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "draw"
        }
      },
      {
        "signature": "void draw_sprite(sprite s,float x_offset,float y_offset);",
        "name": "draw_sprite",
        "method_name": "draw",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard `draw_sprite` routine.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard `draw_sprite` routine.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x_offset": {
            "type": "float",
            "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard `draw_sprite` routine.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y_offset": {
            "type": "float",
            "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard `draw_sprite` routine.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "draw",
          "unique": "draw_offset_x_y"
        }
      },
      {
        "signature": "void free_all_sprites();",
        "name": "free_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the sprites that have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "void free_sprite(sprite s);",
        "name": "free_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free the resources associated with a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Free the resources associated with a sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite"
        }
      },
      {
        "signature": "void free_sprite_pack(const string &name);",
        "name": "free_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the sprite pack and all of its sprites.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Frees the sprite pack and all of its sprites.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool has_sprite(const string &name);",
        "name": "has_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a sprite for the supplied name.\nThis checks against all sprites, those loaded without a name\nare assigned a default.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if you have created a sprite with this name."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Determines if SplashKit has a sprite for the supplied name.\nThis checks against all sprites, those loaded without a name\nare assigned a default.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool has_sprite_pack(const string &name);",
        "name": "has_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if a given sprite_pack has already been created.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if a sprite pack exists with the indicated name."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Indicates if a given sprite_pack has already been created.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void move_sprite(sprite s);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "moves the sprite as indicated by its velocity. You can call this directly ot\nalternatively, this action is performed when the sprite is updated using\nthe ''update_sprite'' routine.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "moves the sprite as indicated by its velocity. You can call this directly ot\nalternatively, this action is performed when the sprite is updated using\nthe ''update_sprite'' routine.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move"
        }
      },
      {
        "signature": "void move_sprite(sprite s,const vector_2d &distance);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Moves the sprite a given distance based on the value passed in rather than\nbased on the sprite's velocity. Typically this method is used to apply\nother movement actions to the sprite and the velocity of the sprite is\nused the intended movement of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Moves the sprite a given distance based on the value passed in rather than\nbased on the sprite's velocity. Typically this method is used to apply\nother movement actions to the sprite and the velocity of the sprite is\nused the intended movement of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "distance": {
            "type": "vector_2d",
            "description": "Moves the sprite a given distance based on the value passed in rather than\nbased on the sprite's velocity. Typically this method is used to apply\nother movement actions to the sprite and the velocity of the sprite is\nused the intended movement of the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "unique": "move_vec"
        }
      },
      {
        "signature": "void move_sprite(sprite s,const vector_2d &distance,float pct);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Moves the sprite a percentage of a given distance based on the value\npassed in rather than based on the sprite's velocity. Typically this\nmethod is used to apply other movement actions to the sprite and the\nvelocity of the sprite is used the intended movement of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Moves the sprite a percentage of a given distance based on the value\npassed in rather than based on the sprite's velocity. Typically this\nmethod is used to apply other movement actions to the sprite and the\nvelocity of the sprite is used the intended movement of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "distance": {
            "type": "vector_2d",
            "description": "Moves the sprite a percentage of a given distance based on the value\npassed in rather than based on the sprite's velocity. Typically this\nmethod is used to apply other movement actions to the sprite and the\nvelocity of the sprite is used the intended movement of the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pct": {
            "type": "float",
            "description": "Moves the sprite a percentage of a given distance based on the value\npassed in rather than based on the sprite's velocity. Typically this\nmethod is used to apply other movement actions to the sprite and the\nvelocity of the sprite is used the intended movement of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "unique": "move_vec_pct"
        }
      },
      {
        "signature": "void move_sprite(sprite s,float pct);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Moves the sprite as indicated by a percentage of its velocity. You can call\nthis directly ot alternatively, this action is performed when the sprite is\nupdated using the ''update_sprite'' routines that require a percentage.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Moves the sprite as indicated by a percentage of its velocity. You can call\nthis directly ot alternatively, this action is performed when the sprite is\nupdated using the ''update_sprite'' routines that require a percentage.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pct": {
            "type": "float",
            "description": "Moves the sprite as indicated by a percentage of its velocity. You can call\nthis directly ot alternatively, this action is performed when the sprite is\nupdated using the ''update_sprite'' routines that require a percentage.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "unique": "move_pct"
        }
      },
      {
        "signature": "void move_sprite_to(sprite s,float x,float y);",
        "name": "move_sprite_to",
        "method_name": "move_to",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This method moves a sprite to a given position in the game.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "This method moves a sprite to a given position in the game.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "This method moves a sprite to a given position in the game.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "This method moves a sprite to a given position in the game.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move_to"
        }
      },
      {
        "signature": "void select_sprite_pack(const string &name);",
        "name": "select_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Selects the named sprite_pack (if it has been created). The\nselected sprite_pack determines which sprites are drawn and updated\nwith the draw_all_sprites and update_all_sprites code.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Selects the named sprite_pack (if it has been created). The\nselected sprite_pack determines which sprites are drawn and updated\nwith the draw_all_sprites and update_all_sprites code.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "int sprite_add_layer(sprite s,bitmap new_layer,const string &layer_name);",
        "name": "sprite_add_layer",
        "method_name": "add_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a new layer to the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The index of the new layer."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Adds a new layer to the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "new_layer": {
            "type": "bitmap",
            "description": "Adds a new layer to the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "layer_name": {
            "type": "string",
            "description": "Adds a new layer to the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_layer"
        }
      },
      {
        "signature": "void sprite_add_to_velocity(sprite s,const vector_2d &value);",
        "name": "sprite_add_to_velocity",
        "method_name": "add_to_velocity",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Alters the current velocity of the sprite, adding the passed in vector_2d to the current velocity.\nWhen the sprite is updated (see `update_sprite`)\nthis vector_2d is used to move the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Alters the current velocity of the sprite, adding the passed in vector_2d to the current velocity.\nWhen the sprite is updated (see `update_sprite`)\nthis vector_2d is used to move the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "vector_2d",
            "description": "Alters the current velocity of the sprite, adding the passed in vector_2d to the current velocity.\nWhen the sprite is updated (see `update_sprite`)\nthis vector_2d is used to move the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_to_velocity"
        }
      },
      {
        "signature": "void sprite_add_value(sprite s,const string &name);",
        "name": "sprite_add_value",
        "method_name": "add_value",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a new kind of value to the sprite",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Adds a new kind of value to the sprite",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Adds a new kind of value to the sprite",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_value"
        }
      },
      {
        "signature": "void sprite_add_value(sprite s,const string &name,float init_val);",
        "name": "sprite_add_value",
        "method_name": "add_value",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a new kind of value to the sprite, setting the initial value\nto the value passed in.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Adds a new kind of value to the sprite, setting the initial value\nto the value passed in.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Adds a new kind of value to the sprite, setting the initial value\nto the value passed in.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "init_val": {
            "type": "float",
            "description": "Adds a new kind of value to the sprite, setting the initial value\nto the value passed in.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_value",
          "unique": "add_value_with_default"
        }
      },
      {
        "signature": "point_2d sprite_anchor_point(sprite s);",
        "name": "sprite_anchor_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the anchor point of the sprite. This is the point around which the\nsprite rotates. This is in sprite coordinates, so as if the sprite is drawn\nat 0,0.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The anchor point of the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the anchor point of the sprite. This is the point around which the\nsprite rotates. This is in sprite coordinates, so as if the sprite is drawn\nat 0,0.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "anchor_point"
        }
      },
      {
        "signature": "point_2d sprite_anchor_position(sprite s);",
        "name": "sprite_anchor_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The sprite anchor position, is the location of the anchor point in world\ncoordinates, based upon the position of the sprite.\n\n@params s The sprite to find where the anchor is in world coordinates",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The location of the sprite's anchor point positioned at the sprite's location"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite anchor position, is the location of the anchor point in world\ncoordinates, based upon the position of the sprite.\n\n@params s The sprite to find where the anchor is in world coordinates",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool sprite_animation_has_ended(sprite s);",
        "name": "sprite_animation_has_ended",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the sprites animation has ended.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if the sprite animation has ended."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Indicates if the sprites animation has ended.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "animation_has_ended"
        }
      },
      {
        "signature": "string sprite_animation_name(sprite s);",
        "name": "sprite_animation_name",
        "method_name": "animation_name",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the sprite's current animation.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "The name of the current animation."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the name of the sprite's current animation.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "animation_name"
        }
      },
      {
        "signature": "bool sprite_at(sprite s,const point_2d &pt);",
        "name": "sprite_at",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if a sprite is at a given point.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Determines if a sprite is at a given point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Determines if a sprite is at a given point.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void sprite_bring_layer_forward(sprite s,int visible_layer);",
        "name": "sprite_bring_layer_forward",
        "method_name": "send_layer_forward",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends the layer specified forward in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sends the layer specified forward in the visible layer order.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "visible_layer": {
            "type": "int",
            "description": "Sends the layer specified forward in the visible layer order.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "send_layer_forward"
        }
      },
      {
        "signature": "void sprite_bring_layer_to_front(sprite s,int visible_layer);",
        "name": "sprite_bring_layer_to_front",
        "method_name": "Send_layer_toFront",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends the layer specified to the front in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sends the layer specified to the front in the visible layer order.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "visible_layer": {
            "type": "int",
            "description": "Sends the layer specified to the front in the visible layer order.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Send_layer_toFront"
        }
      },
      {
        "signature": "void sprite_call_on_event(sprite s,sprite_event_handler *handler);",
        "name": "sprite_call_on_event",
        "method_name": "call_on_event",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register a procedure to call when events occur on the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Register a procedure to call when events occur on the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "handler": {
            "type": "sprite_event_handler",
            "description": "Register a procedure to call when events occur on the sprite.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "call_on_event"
        }
      },
      {
        "signature": "circle sprite_circle(sprite s);",
        "name": "sprite_circle",
        "method_name": "circle",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the base layer of the indicated sprite.",
        "brief": null,
        "return": {
          "type": "circle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A bounding circle that surrounds the sprite"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Gets a circle in the bounds of the base layer of the indicated sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "circle"
        }
      },
      {
        "signature": "bitmap sprite_collision_bitmap(sprite s);",
        "name": "sprite_collision_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the bitmap used by the sprite to determine if it has collided with\nother objects in the game.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "is_pointer": false,
          "is_reference": false,
          "description": "The bitmap used for collisions with this sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the bitmap used by the sprite to determine if it has collided with\nother objects in the game.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "collision_bitmap"
        }
      },
      {
        "signature": "circle sprite_collision_circle(sprite s);",
        "name": "sprite_collision_circle",
        "method_name": "collision_circle",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the indicated sprite's collision rectangle.",
        "brief": null,
        "return": {
          "type": "circle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A bounding circle that surrounds the sprite"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Gets a circle in the bounds of the indicated sprite's collision rectangle.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "collision_circle"
        }
      },
      {
        "signature": "collision_test_kind sprite_collision_kind(sprite s);",
        "name": "sprite_collision_kind",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
        "brief": null,
        "return": {
          "type": "collision_test_kind",
          "is_pointer": false,
          "is_reference": false,
          "description": "The kind of collisions performed with this sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "collision_kind"
        }
      },
      {
        "signature": "rectangle sprite_collision_rectangle(sprite s);",
        "name": "sprite_collision_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the collision rectangle for the specified sprite.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A collision rectangle that surrounds the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the collision rectangle for the specified sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "collision_rectangle"
        }
      },
      {
        "signature": "int sprite_current_cell(sprite s);",
        "name": "sprite_current_cell",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current animation cell for an animated sprite. The cell is\nupdated when the sprite's animation data is updated.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The current cell animation of the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the current animation cell for an animated sprite. The cell is\nupdated when the sprite's animation data is updated.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "current_cell"
        }
      },
      {
        "signature": "rectangle sprite_current_cell_rectangle(sprite s);",
        "name": "sprite_current_cell_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle of the current cell within the sprite's image. This is used\nto determine what part of the bitmap should be used when the sprite is drawn.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "The current cell rectangle of the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns a rectangle of the current cell within the sprite's image. This is used\nto determine what part of the bitmap should be used when the sprite is drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "current_cell_rectangle"
        }
      },
      {
        "signature": "float sprite_dx(sprite s);",
        "name": "sprite_dx",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the X value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The x component of the sprite's velocity."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the X value of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "dx"
        }
      },
      {
        "signature": "float sprite_dy(sprite s);",
        "name": "sprite_dy",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the Y value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The y component of the sprite's velocity."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the Y value of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "dy"
        }
      },
      {
        "signature": "bool sprite_has_value(sprite s,string name);",
        "name": "sprite_has_value",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the sprite has a value with the given name.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if the sprite has a value with that name."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Indicates if the sprite has a value with the given name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Indicates if the sprite has a value with the given name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "float sprite_heading(sprite s);",
        "name": "sprite_heading",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the direction the sprite is heading in degrees.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The angle of the sprite velocity."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the direction the sprite is heading in degrees.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "heading"
        }
      },
      {
        "signature": "int sprite_height(sprite s);",
        "name": "sprite_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The current height of the sprite (aligned to the Y axis).",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The height of the sprite in pixels."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The current height of the sprite (aligned to the Y axis).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Height"
        }
      },
      {
        "signature": "void sprite_hide_layer(sprite s,const string &name);",
        "name": "sprite_hide_layer",
        "method_name": "hide_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Hide the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": "The index of the layer hidden, or -1 if no layer found."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Hide the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Hide the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "hide_layer",
          "unique": "hide_layer_named"
        }
      },
      {
        "signature": "void sprite_hide_layer(sprite s,int id);",
        "name": "sprite_hide_layer",
        "method_name": "Hide_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Hide the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": "The index of the layer hidden, or -1 if no layer found."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Hide the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "id": {
            "type": "int",
            "description": "Hide the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Hide_layer"
        }
      },
      {
        "signature": "bitmap sprite_layer(sprite s,const string &name);",
        "name": "sprite_layer",
        "method_name": "layer_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the bitmap of the indicated layer of the sprite.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "is_pointer": false,
          "is_reference": false,
          "description": "The bitmap at the layer with the indicated name"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the bitmap of the indicated layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Returns the bitmap of the indicated layer of the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_named"
        }
      },
      {
        "signature": "bitmap sprite_layer(sprite s,int idx);",
        "name": "sprite_layer",
        "method_name": "layer_at_idx",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the bitmap of the indicated layer of the sprite.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "is_pointer": false,
          "is_reference": false,
          "description": "The bitmap of the sprite at that layer"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the bitmap of the indicated layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Returns the bitmap of the indicated layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_at_idx"
        }
      },
      {
        "signature": "circle sprite_layer_circle(sprite s,const string &name);",
        "name": "sprite_layer_circle",
        "method_name": "circle_for_layer_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the indicated layer.",
        "brief": null,
        "return": {
          "type": "circle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A bounding circle that surrounds the sprite's layer"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Gets a circle in the bounds of the indicated layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Gets a circle in the bounds of the indicated layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "circle_for_layer_named"
        }
      },
      {
        "signature": "circle sprite_layer_circle(sprite s,int idx);",
        "name": "sprite_layer_circle",
        "method_name": "circle_for_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the indicated layer.",
        "brief": null,
        "return": {
          "type": "circle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A bounding circle that surrounds the sprite's layer"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Gets a circle in the bounds of the indicated layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Gets a circle in the bounds of the indicated layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "circle_for_layer"
        }
      },
      {
        "signature": "int sprite_layer_count(sprite s);",
        "name": "sprite_layer_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of layers within the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The number of image layers in the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the number of layers within the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "layer_count"
        }
      },
      {
        "signature": "int sprite_layer_height(sprite s,const string &name);",
        "name": "sprite_layer_height",
        "method_name": "layer_height",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The height of a given layer of the sprite (aligned to the Y axis).",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The height of the sprite's layer in pixels."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The height of a given layer of the sprite (aligned to the Y axis).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "The height of a given layer of the sprite (aligned to the Y axis).",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_height",
          "unique": "layer_named_height"
        }
      },
      {
        "signature": "int sprite_layer_height(sprite s,int idx);",
        "name": "sprite_layer_height",
        "method_name": "layer_height",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The height of a given layer of the sprite (aligned to the Y axis).",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The height of the sprite's layer in pixels."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The height of a given layer of the sprite (aligned to the Y axis).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "The height of a given layer of the sprite (aligned to the Y axis).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_height"
        }
      },
      {
        "signature": "int sprite_layer_index(sprite s,const string &name);",
        "name": "sprite_layer_index",
        "method_name": "Index_of_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the index of the specified layer.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The index of the layer in the sprite"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the index of the specified layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Returns the index of the specified layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Index_of_layer"
        }
      },
      {
        "signature": "string sprite_layer_name(sprite s,int idx);",
        "name": "sprite_layer_name",
        "method_name": "layer_name",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the specified layer.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "The name of the sprite's layer at that index"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the name of the specified layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Returns the name of the specified layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_name"
        }
      },
      {
        "signature": "vector_2d sprite_layer_offset(sprite s,const string &name);",
        "name": "sprite_layer_offset",
        "method_name": "layer_offset",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the offset of the specified layer.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The offset of the named layer in the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Gets the offset of the specified layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Gets the offset of the specified layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_offset",
          "unique": "layer_named_offset"
        }
      },
      {
        "signature": "vector_2d sprite_layer_offset(sprite s,int idx);",
        "name": "sprite_layer_offset",
        "method_name": "layer_offset",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the offset of the specified layer.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The offset of the layer in the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Gets the offset of the specified layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Gets the offset of the specified layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_offset"
        }
      },
      {
        "signature": "rectangle sprite_layer_rectangle(sprite s,const string &name);",
        "name": "sprite_layer_rectangle",
        "method_name": "rectangle_for_layer_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a rectangle that surrounds the indicated layer.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A bounding rectangle that surrounds the sprite's layer"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Gets a rectangle that surrounds the indicated layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Gets a rectangle that surrounds the indicated layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "rectangle_for_layer_named"
        }
      },
      {
        "signature": "rectangle sprite_layer_rectangle(sprite s,int idx);",
        "name": "sprite_layer_rectangle",
        "method_name": "rectangle_for_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a rectangle that surrounds the indicated layer.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A bounding rectangle that surrounds the sprite's layer"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Gets a rectangle that surrounds the indicated layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Gets a rectangle that surrounds the indicated layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "rectangle_for_layer"
        }
      },
      {
        "signature": "int sprite_layer_width(sprite s,const string &name);",
        "name": "sprite_layer_width",
        "method_name": "layer_width",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The width of a given layer of the sprite (aligned to the X axis).",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The width of the sprite's layer in pixels."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The width of a given layer of the sprite (aligned to the X axis).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "The width of a given layer of the sprite (aligned to the X axis).",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_width",
          "unique": "layer_named_width"
        }
      },
      {
        "signature": "int sprite_layer_width(sprite s,int idx);",
        "name": "sprite_layer_width",
        "method_name": "layer_width",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The width of a given layer of the sprite (aligned to the X axis).",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The width of the sprite's layer in pixels."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The width of a given layer of the sprite (aligned to the X axis).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "The width of a given layer of the sprite (aligned to the X axis).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_width"
        }
      },
      {
        "signature": "matrix_2d sprite_location_matrix(sprite s);",
        "name": "sprite_location_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a matrix that can be used to transform points into the coordinate\nspace of the passed in sprite.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A matrix that transforms points into the sprites coordinate\nspace."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns a matrix that can be used to transform points into the coordinate\nspace of the passed in sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "location_matrix"
        }
      },
      {
        "signature": "float sprite_mass(sprite s);",
        "name": "sprite_mass",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This indicates the mass of the sprite for any of the collide methods from\nPhysics. The mass of two colliding sprites will determine the relative\nvelocitys after the collision.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The mass of the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "This indicates the mass of the sprite for any of the collide methods from\nPhysics. The mass of two colliding sprites will determine the relative\nvelocitys after the collision.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "mass"
        }
      },
      {
        "signature": "bool sprite_move_from_anchor_point(sprite s);",
        "name": "sprite_move_from_anchor_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the sprite is moved from its anchor point, or from its top left.\nWhen this returns true the location of the sprite will indicate its anchor point.\nWhen this returns false the location of the sprite is its top left corner.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if the sprite moves from its anchor point."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Indicates if the sprite is moved from its anchor point, or from its top left.\nWhen this returns true the location of the sprite will indicate its anchor point.\nWhen this returns false the location of the sprite is its top left corner.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "move_from_anchor_point"
        }
      },
      {
        "signature": "void sprite_move_to(sprite s,const point_2d &pt,float taking_seconds);",
        "name": "sprite_move_to",
        "method_name": "move_to",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This void starts the sprite moving to the indicated\ndestination point, over a specified number of seconds. When the\nsprite arrives it will raise the sprite_arrived event.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "This void starts the sprite moving to the indicated\ndestination point, over a specified number of seconds. When the\nsprite arrives it will raise the sprite_arrived event.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "This void starts the sprite moving to the indicated\ndestination point, over a specified number of seconds. When the\nsprite arrives it will raise the sprite_arrived event.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "taking_seconds": {
            "type": "float",
            "description": "This void starts the sprite moving to the indicated\ndestination point, over a specified number of seconds. When the\nsprite arrives it will raise the sprite_arrived event.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move_to",
          "unique": "move_to_taking_seconds"
        }
      },
      {
        "signature": "string sprite_name(sprite s);",
        "name": "sprite_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the sprite. This name is used for resource management\nand can be used to interact with the sprite in various routines.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "The name of the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the name of the sprite. This name is used for resource management\nand can be used to interact with the sprite in various routines.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "name"
        }
      },
      {
        "signature": "sprite sprite_named(const string &name);",
        "name": "sprite_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `sprite` with the specified name.",
        "brief": null,
        "return": {
          "type": "sprite",
          "is_pointer": false,
          "is_reference": false,
          "description": "The sprite with that name."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Returns the `sprite` with the specified name.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool sprite_offscreen(sprite s);",
        "name": "sprite_offscreen",
        "method_name": "offscreen",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the sprite is entirely off the current screen.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns true if the sprite is entirely off the current screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "offscreen"
        }
      },
      {
        "signature": "bool sprite_on_screen_at(sprite s,const point_2d &pt);",
        "name": "sprite_on_screen_at",
        "method_name": "on_screen_at",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified (`pt`), which is converted to a world location.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if the sprite would draw something at this coordinate on\nthe screen when drawn."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified (`pt`), which is converted to a world location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified (`pt`), which is converted to a world location.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "on_screen_at",
          "unique": "on_screen_at_point"
        }
      },
      {
        "signature": "bool sprite_on_screen_at(sprite s,float x,float y);",
        "name": "sprite_on_screen_at",
        "method_name": "on_screen_at",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "True if the sprite would draw something at this coordinate on\nthe screen when drawn."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "on_screen_at"
        }
      },
      {
        "signature": "point_2d sprite_position(sprite s);",
        "name": "sprite_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the sprite's position.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The location of the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the sprite's position.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Position"
        }
      },
      {
        "signature": "void sprite_replay_animation(sprite s);",
        "name": "sprite_replay_animation",
        "method_name": "Replay_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Restart the sprite's current animation, this will play a sound if the\nfirst cell of the animation is associated with a sound effect.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Restart the sprite's current animation, this will play a sound if the\nfirst cell of the animation is associated with a sound effect.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Replay_animation"
        }
      },
      {
        "signature": "void sprite_replay_animation(sprite s,bool with_sound);",
        "name": "sprite_replay_animation",
        "method_name": "replay_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Restart the sprite's current animation, this will play a sound if\nwith_sound is true and the first cell of the animation is associated\nwith a sound effect.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Restart the sprite's current animation, this will play a sound if\nwith_sound is true and the first cell of the animation is associated\nwith a sound effect.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Restart the sprite's current animation, this will play a sound if\nwith_sound is true and the first cell of the animation is associated\nwith a sound effect.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "replay_animation",
          "unique": "replay_animation_with_sound"
        }
      },
      {
        "signature": "float sprite_rotation(sprite s);",
        "name": "sprite_rotation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This indicates the angle of rotation of the sprite. This will rotate any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The angle of the sprite rotation."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "This indicates the angle of rotation of the sprite. This will rotate any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Rotation"
        }
      },
      {
        "signature": "float sprite_scale(sprite s);",
        "name": "sprite_scale",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This indicates the scale of the sprite. This will scale any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The scale of the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "This indicates the scale of the sprite. This will scale any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "scale"
        }
      },
      {
        "signature": "rectangle sprite_screen_rectangle(sprite s);",
        "name": "sprite_screen_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the rectangle representing the location of the sprite on the\nscreen.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "is_pointer": false,
          "is_reference": false,
          "description": "A rectangle indicating where the sprite is on the screen."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the rectangle representing the location of the sprite on the\nscreen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Screen_rectangle"
        }
      },
      {
        "signature": "void sprite_send_layer_backward(sprite s,int visible_layer);",
        "name": "sprite_send_layer_backward",
        "method_name": "Send_layer_toBackward",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends the layer specified backward in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sends the layer specified backward in the visible layer order.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "visible_layer": {
            "type": "int",
            "description": "Sends the layer specified backward in the visible layer order.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Send_layer_toBackward"
        }
      },
      {
        "signature": "void sprite_send_layer_to_back(sprite s,int visible_layer);",
        "name": "sprite_send_layer_to_back",
        "method_name": "send_layer_to_back",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends the layer specified to the back in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sends the layer specified to the back in the visible layer order.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "visible_layer": {
            "type": "int",
            "description": "Sends the layer specified to the back in the visible layer order.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "send_layer_to_back"
        }
      },
      {
        "signature": "void sprite_set_anchor_point(sprite s,const point_2d &pt);",
        "name": "sprite_set_anchor_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to set the anchor point for the sprite. This is the point around\nwhich the sprite rotates. This is in sprite coordinates, as if the sprite\nis drawn at 0,0.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Allows you to set the anchor point for the sprite. This is the point around\nwhich the sprite rotates. This is in sprite coordinates, as if the sprite\nis drawn at 0,0.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Allows you to set the anchor point for the sprite. This is the point around\nwhich the sprite rotates. This is in sprite coordinates, as if the sprite\nis drawn at 0,0.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter anchor_point"
        }
      },
      {
        "signature": "void sprite_set_collision_bitmap(sprite s,bitmap bmp);",
        "name": "sprite_set_collision_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the bitmap used by the sprite to determine if it has collided with\nother objects in the game. By default the collision_bitmap is set to the\nbitmap from the sprite's first layer.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the bitmap used by the sprite to determine if it has collided with\nother objects in the game. By default the collision_bitmap is set to the\nbitmap from the sprite's first layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "bmp": {
            "type": "bitmap",
            "description": "Sets the bitmap used by the sprite to determine if it has collided with\nother objects in the game. By default the collision_bitmap is set to the\nbitmap from the sprite's first layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter collision_bitmap"
        }
      },
      {
        "signature": "void sprite_set_collision_kind(sprite s,collision_test_kind value);",
        "name": "sprite_set_collision_kind",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "collision_test_kind",
            "description": "Sets the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter collision_kind"
        }
      },
      {
        "signature": "void sprite_set_dx(sprite s,float value);",
        "name": "sprite_set_dx",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the X value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the X value of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "float",
            "description": "Sets the X value of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter dx"
        }
      },
      {
        "signature": "void sprite_set_dy(sprite s,float value);",
        "name": "sprite_set_dy",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the Y value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the Y value of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "float",
            "description": "Sets the Y value of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter dy"
        }
      },
      {
        "signature": "void sprite_set_heading(sprite s,float value);",
        "name": "sprite_set_heading",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Alters the direction the sprite is heading without changing the speed.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Alters the direction the sprite is heading without changing the speed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "float",
            "description": "Alters the direction the sprite is heading without changing the speed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter heading"
        }
      },
      {
        "signature": "void sprite_set_layer_offset(sprite s,const string &name,const vector_2d &value);",
        "name": "sprite_set_layer_offset",
        "method_name": "set_layer_offset",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the offset of the specified layer. The offset is used when the layer\nis drawn in the sprite, and moves the image relative to the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the offset of the specified layer. The offset is used when the layer\nis drawn in the sprite, and moves the image relative to the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Sets the offset of the specified layer. The offset is used when the layer\nis drawn in the sprite, and moves the image relative to the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "vector_2d",
            "description": "Sets the offset of the specified layer. The offset is used when the layer\nis drawn in the sprite, and moves the image relative to the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "set_layer_offset",
          "unique": "set_layer_named_offset"
        }
      },
      {
        "signature": "void sprite_set_layer_offset(sprite s,int idx,const vector_2d &value);",
        "name": "sprite_set_layer_offset",
        "method_name": "Set_layer_offset",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the offset of the specified layer.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the offset of the specified layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Sets the offset of the specified layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "vector_2d",
            "description": "Sets the offset of the specified layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Set_layer_offset",
          "unique": "Set_layer_named_offset"
        }
      },
      {
        "signature": "void sprite_set_mass(sprite s,float value);",
        "name": "sprite_set_mass",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to change the mass of a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Allows you to change the mass of a sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "float",
            "description": "Allows you to change the mass of a sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter mass"
        }
      },
      {
        "signature": "void sprite_set_move_from_anchor_point(sprite s,bool value);",
        "name": "sprite_set_move_from_anchor_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to indicate if the sprite is moved from its anchor point, or from its\ntop left.\n\nWhen set to true the location of the sprite will be its anchor point.\nWhen set to false the location of the sprite is its top left corner.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Allows you to indicate if the sprite is moved from its anchor point, or from its\ntop left.\n\nWhen set to true the location of the sprite will be its anchor point.\nWhen set to false the location of the sprite is its top left corner.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "bool",
            "description": "Allows you to indicate if the sprite is moved from its anchor point, or from its\ntop left.\n\nWhen set to true the location of the sprite will be its anchor point.\nWhen set to false the location of the sprite is its top left corner.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter move_from_anchor_point"
        }
      },
      {
        "signature": "void sprite_set_position(sprite s,const point_2d &value);",
        "name": "sprite_set_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the sprite's position.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the sprite's position.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "point_2d",
            "description": "Sets the sprite's position.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter Position"
        }
      },
      {
        "signature": "void sprite_set_rotation(sprite s,float value);",
        "name": "sprite_set_rotation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to change the rotation of a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Allows you to change the rotation of a sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "float",
            "description": "Allows you to change the rotation of a sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "class sprite": "@setter rotation"
        }
      },
      {
        "signature": "void sprite_set_scale(sprite s,float value);",
        "name": "sprite_set_scale",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to change the scale of a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Allows you to change the scale of a sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "float",
            "description": "Allows you to change the scale of a sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter scale"
        }
      },
      {
        "signature": "void sprite_set_speed(sprite s,float value);",
        "name": "sprite_set_speed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Alters the speed of the sprite without effecting the direction.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Alters the speed of the sprite without effecting the direction.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "float",
            "description": "Alters the speed of the sprite without effecting the direction.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter speed"
        }
      },
      {
        "signature": "void sprite_set_value(sprite s,const string &name,float val);",
        "name": "sprite_set_value",
        "method_name": "set_value",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns a value to the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Assigns a value to the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Assigns a value to the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "val": {
            "type": "float",
            "description": "Assigns a value to the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "set_value",
          "unique": "set_value_named"
        }
      },
      {
        "signature": "void sprite_set_velocity(sprite s,const vector_2d &value);",
        "name": "sprite_set_velocity",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "vector_2d",
            "description": "Sets the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter velocity"
        }
      },
      {
        "signature": "void sprite_set_x(sprite s,float value);",
        "name": "sprite_set_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the X position of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the X position of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "float",
            "description": "Sets the X position of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter x"
        }
      },
      {
        "signature": "void sprite_set_y(sprite s,float value);",
        "name": "sprite_set_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the Y position of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Sets the Y position of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "value": {
            "type": "float",
            "description": "Sets the Y position of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class sprite": "@setter y"
        }
      },
      {
        "signature": "int sprite_show_layer(sprite s,const string &name);",
        "name": "sprite_show_layer",
        "method_name": "show_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Show the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The index of the layer shown, or -1 if no layer found."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Show the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Show the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "show_layer",
          "unique": "show_layer_named"
        }
      },
      {
        "signature": "int sprite_show_layer(sprite s,int id);",
        "name": "sprite_show_layer",
        "method_name": "show_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Show the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The index of the layer shown, or -1 if no layer found."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Show the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "id": {
            "type": "int",
            "description": "Show the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "show_layer"
        }
      },
      {
        "signature": "float sprite_speed(sprite s);",
        "name": "sprite_speed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current speed (distance travelled per update) of the sprite.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The speed of the sprite (pixels per update)."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the current speed (distance travelled per update) of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "speed"
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,const string &named);",
        "name": "sprite_start_animation",
        "method_name": "Start_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "named": {
            "type": "string",
            "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Start_animation",
          "unique": "Start_animation_named"
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,const string &named,bool with_sound);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "named": {
            "type": "string",
            "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation",
          "unique": "start_animation_named_with_sound"
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,int idx);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation"
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,int idx,bool with_sound);",
        "name": "sprite_start_animation",
        "method_name": "Start_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Start_animation",
          "unique": "Start_animation_with_sound"
        }
      },
      {
        "signature": "void sprite_stop_calling_on_event(sprite s,sprite_event_handler *handler);",
        "name": "sprite_stop_calling_on_event",
        "method_name": "stop_calling_on_event",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Removes an event handler from the sprite, stopping events from this\nsprite calling the indicated method.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Removes an event handler from the sprite, stopping events from this\nsprite calling the indicated method.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "handler": {
            "type": "sprite_event_handler",
            "description": "Removes an event handler from the sprite, stopping events from this\nsprite calling the indicated method.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "stop_calling_on_event"
        }
      },
      {
        "signature": "void sprite_toggle_layer_visible(sprite s,const string &name);",
        "name": "sprite_toggle_layer_visible",
        "method_name": "toggle_layer_visible",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the visibility of the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Toggle the visibility of the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Toggle the visibility of the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "toggle_layer_visible",
          "unique": "toggle_layer_named_visible"
        }
      },
      {
        "signature": "void sprite_toggle_layer_visible(sprite s,int id);",
        "name": "sprite_toggle_layer_visible",
        "method_name": "Toggle_layer_visible",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the visibility of the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Toggle the visibility of the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "id": {
            "type": "int",
            "description": "Toggle the visibility of the specified layer of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Toggle_layer_visible"
        }
      },
      {
        "signature": "float sprite_value(sprite s,const string &name);",
        "name": "sprite_value",
        "method_name": "value",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the indicated value of the sprite",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The value from the sprite's data store."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the indicated value of the sprite",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Returns the indicated value of the sprite",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "value"
        }
      },
      {
        "signature": "int sprite_value_count(sprite s);",
        "name": "sprite_value_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of sprite's values.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The number of values stored in the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the number of sprite's values.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "value_count"
        }
      },
      {
        "signature": "vector_2d sprite_velocity(sprite s);",
        "name": "sprite_velocity",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "The sprite's velocity."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "velocity"
        }
      },
      {
        "signature": "int sprite_visible_index_of_layer(sprite s,const string &name);",
        "name": "sprite_visible_index_of_layer",
        "method_name": "visible_index_of_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the index (z-order) of the sprite's layer.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The z index of the sprite's layer"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the index (z-order) of the sprite's layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "name": {
            "type": "string",
            "description": "Returns the index (z-order) of the sprite's layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_index_of_layer",
          "unique": "visible_index_of_layer_named"
        }
      },
      {
        "signature": "int sprite_visible_index_of_layer(sprite s,int id);",
        "name": "sprite_visible_index_of_layer",
        "method_name": "visible_index_of_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the index (z-order) of the sprite's layer.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The z index of the sprite's layer"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the index (z-order) of the sprite's layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "id": {
            "type": "int",
            "description": "Returns the index (z-order) of the sprite's layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_index_of_layer"
        }
      },
      {
        "signature": "int sprite_visible_layer(sprite s,int idx);",
        "name": "sprite_visible_layer",
        "method_name": "visible_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the index of the n'th (idx parameter) visible layer.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The layer index of the selected visible layer."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the index of the n'th (idx parameter) visible layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Returns the index of the n'th (idx parameter) visible layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_layer"
        }
      },
      {
        "signature": "int sprite_visible_layer_count(sprite s);",
        "name": "sprite_visible_layer_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of layers that are currently visible for the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The number of visible layers for the sprite."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the number of layers that are currently visible for the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "visible_layer_count"
        }
      },
      {
        "signature": "int sprite_visible_layer_id(sprite s,int idx);",
        "name": "sprite_visible_layer_id",
        "method_name": "visible_layer_id_at",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the id of the layer at index `idx` that is currently visible.\nIndex 0 is the background, with larger indexes moving toward the foreground.\nThis returns -1 if there are no visible layers.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The layer index of the visible layer."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the id of the layer at index `idx` that is currently visible.\nIndex 0 is the background, with larger indexes moving toward the foreground.\nThis returns -1 if there are no visible layers.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "idx": {
            "type": "int",
            "description": "Returns the id of the layer at index `idx` that is currently visible.\nIndex 0 is the background, with larger indexes moving toward the foreground.\nThis returns -1 if there are no visible layers.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_layer_id_at"
        }
      },
      {
        "signature": "int sprite_width(sprite s);",
        "name": "sprite_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The current Width of the sprite (aligned to the X axis).",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": "The width of the sprite's layer in pixels."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The current Width of the sprite (aligned to the X axis).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Width"
        }
      },
      {
        "signature": "float sprite_x(sprite s);",
        "name": "sprite_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the X position of the sprite.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The x location of the sprite"
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the X position of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "x"
        }
      },
      {
        "signature": "float sprite_y(sprite s);",
        "name": "sprite_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the Y position of the sprite.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": "The sprite's y location."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns the Y position of the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "y"
        }
      },
      {
        "signature": "void stop_calling_on_sprite_event(sprite_event_handler *handler);",
        "name": "stop_calling_on_sprite_event",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Removes an global event handler, stopping events calling the indicated void.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "handler": {
            "type": "sprite_event_handler",
            "description": "Removes an global event handler, stopping events calling the indicated void.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void update_all_sprites();",
        "name": "update_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update all of the sprites in the current sprite pack.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
        }
      },
      {
        "signature": "void update_all_sprites(float pct);",
        "name": "update_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update all of the sprites in the current sprite pack, passing in a\npercentage value to indicate the percentage to update.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pct": {
            "type": "float",
            "description": "Update all of the sprites in the current sprite pack, passing in a\npercentage value to indicate the percentage to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void update_sprite(sprite s);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update"
        }
      },
      {
        "signature": "void update_sprite(sprite s,bool with_sound);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update",
          "unique": "update_with_sound"
        }
      },
      {
        "signature": "void update_sprite(sprite s,float pct);",
        "name": "update_sprite",
        "method_name": "Update",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pct": {
            "type": "float",
            "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Update",
          "unique": "update_percent"
        }
      },
      {
        "signature": "void update_sprite(sprite s,float pct,bool with_sound);",
        "name": "update_sprite",
        "method_name": "Update",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pct": {
            "type": "float",
            "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Update",
          "unique": "update_percent_with_sound"
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Updates the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Updates the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation"
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s,bool with_sound);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Update the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Update the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "unique": "update_animation_with_sound"
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s,float pct);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update the animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Update the animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pct": {
            "type": "float",
            "description": "Update the animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "unique": "update_animation_pct"
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s,float pct,bool with_sound);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pct": {
            "type": "float",
            "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "with_sound": {
            "type": "bool",
            "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "unique": "update_animation_pct_with_sound"
        }
      },
      {
        "signature": "vector_2d vector_from_center_sprite_to_point(sprite s,const point_2d &pt);",
        "name": "vector_from_center_sprite_to_point",
        "method_name": "vector_to",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `vector_2d` that is the difference in location from the center of\nthe sprite `s` to the point `pt`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A vector pointing from the sprite to the point."
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "Returns a `vector_2d` that is the difference in location from the center of\nthe sprite `s` to the point `pt`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "pt": {
            "type": "point_2d",
            "description": "Returns a `vector_2d` that is the difference in location from the center of\nthe sprite `s` to the point `pt`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "vector_to",
          "unique": "vector_to_point"
        }
      },
      {
        "signature": "vector_2d vector_from_to(sprite s1,sprite s2);",
        "name": "vector_from_to",
        "method_name": "vector_to",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `vector_2d` that is the difference in the position of two sprites\n(`s1` and `s2`).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": "A vector that points from s1 to s2."
        },
        "parameters": {
          "s1": {
            "type": "sprite",
            "description": "Returns a `vector_2d` that is the difference in the position of two sprites\n(`s1` and `s2`).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "s2": {
            "type": "sprite",
            "description": "Returns a `vector_2d` that is the difference in the position of two sprites\n(`s1` and `s2`).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "vector_to"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _sprite_data *sprite;",
        "name": "sprite",
        "description": "Sprites combine an image, with position and animation details. You can\ncreate a sprite using `create_sprite`, draw it with `draw_sprite`, move it\nusing the `sprite_velocity` with `update_sprite`, and animate it using an\n`animation_script`.",
        "brief": null,
        "attributes": {
          "class": "sprite"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef void (sprite_event_handler) (sprite s,sprite_event_kind evt);",
        "name": "sprite_event_handler",
        "description": "The sprite_event_handler function pointer is used when you want to register\nto receive events from a Sprite.",
        "brief": null,
        "attributes": {
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite_event_handler function pointer is used when you want to register\nto receive events from a Sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "evt": {
            "type": "sprite_event_kind",
            "description": "The sprite_event_handler function pointer is used when you want to register\nto receive events from a Sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        }
      },
      {
        "signature": "typedef void (sprite_float_function)(sprite s,float f);",
        "name": "sprite_float_function",
        "description": "The sprite single function is used with sprite packs to provide a\nprocedure to be called for each of the Sprites in the sprite pack,\nwhere a float value is required.",
        "brief": null,
        "attributes": {
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite single function is used with sprite packs to provide a\nprocedure to be called for each of the Sprites in the sprite pack,\nwhere a float value is required.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "f": {
            "type": "float",
            "description": "The sprite single function is used with sprite packs to provide a\nprocedure to be called for each of the Sprites in the sprite pack,\nwhere a float value is required.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        }
      },
      {
        "signature": "typedef void (sprite_function)(sprite s);",
        "name": "sprite_function",
        "description": "sprite_function is used with SpritePacks to provide a procedure to be\ncalled for each of the Sprites in the SpritePack.",
        "brief": null,
        "attributes": {
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "sprite_function is used with SpritePacks to provide a procedure to be\ncalled for each of the Sprites in the SpritePack.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        }
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum collision_test_kind {PIXEL_COLLISIONS,AABB_COLLISIONS};",
        "name": "collision_test_kind",
        "description": "This enumeration can be used to set the kind of collisions a sprite will check for.",
        "brief": null,
        "constants": {
          "PIXEL_COLLISIONS": {
          },
          "AABB_COLLISIONS": {
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "enum sprite_event_kind {SPRITE_ARRIVED_EVENT,SPRITE_ANIMATION_ENDED_EVENT,SPRITE_TOUCHED_EVENT,SPRITE_CLICKED_EVENT};",
        "name": "sprite_event_kind",
        "description": "This enumeration contains a list of all of the different kinds of\nevents that a Sprite can raise. When the event is raised the assocated\nsprite_event_kind value passed to the event handler to indicate the\nkind of event that has occurred.",
        "brief": null,
        "constants": {
          "SPRITE_ARRIVED_EVENT": {
          },
          "SPRITE_ANIMATION_ENDED_EVENT": {
          },
          "SPRITE_TOUCHED_EVENT": {
          },
          "SPRITE_CLICKED_EVENT": {
          }
        },
        "attributes": {
        }
      }
    ],
    "defines": [

    ]
  },
  "text": {
    "name": "text",
    "brief": "SplashKit Text allows for drawing text in a variety of ways to graphic windows.",
    "description": null,
    "functions": [
      {
        "signature": "void draw_text(const string &text,const color &clr,const string &fnt,int font_size,float x,float y);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws the text provided in `text` to the screen with color `clr`, font `fnt`, size `font_size`\nat `x` and `y` to the current focused window.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "Draws the text provided in `text` to the screen with color `clr`, font `fnt`, size `font_size`\nat `x` and `y` to the current focused window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "clr": {
            "type": "color",
            "description": "Draws the text provided in `text` to the screen with color `clr`, font `fnt`, size `font_size`\nat `x` and `y` to the current focused window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "fnt": {
            "type": "string",
            "description": "Draws the text provided in `text` to the screen with color `clr`, font `fnt`, size `font_size`\nat `x` and `y` to the current focused window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "font_size": {
            "type": "int",
            "description": "Draws the text provided in `text` to the screen with color `clr`, font `fnt`, size `font_size`\nat `x` and `y` to the current focused window.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "x": {
            "type": "float",
            "description": "Draws the text provided in `text` to the screen with color `clr`, font `fnt`, size `font_size`\nat `x` and `y` to the current focused window.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Draws the text provided in `text` to the screen with color `clr`, font `fnt`, size `font_size`\nat `x` and `y` to the current focused window.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "text"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "text_input": {
    "name": "text_input",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "void start_reading_text(rectangle rect);",
        "name": "start_reading_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "timers": {
    "name": "timers",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "timer create_timer(string name);",
        "name": "create_timer",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create and return a new Timer. The timer will not be started, and will have\nan initial 'ticks' of 0.",
        "brief": null,
        "return": {
          "type": "timer",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Create and return a new Timer. The timer will not be started, and will have\nan initial 'ticks' of 0.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "constructor": true
        }
      },
      {
        "signature": "void free_all_timers();",
        "name": "free_all_timers",
        "method_name": "release_all_timers",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free all of timers that have been created.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "timers",
          "method": "release_all_timers"
        }
      },
      {
        "signature": "void free_timer(timer to_free);",
        "name": "free_timer",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free the memory used to store this timer.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "to_free": {
            "type": "timer",
            "description": "Free the memory used to store this timer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "destructor": true
        }
      },
      {
        "signature": "bool has_timer(string name);",
        "name": "has_timer",
        "method_name": "has_timer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if SplashKit has a timer with the indicated name.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Checks if SplashKit has a timer with the indicated name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timers",
          "method": "has_timer"
        }
      },
      {
        "signature": "bool has_timer(timer t);",
        "name": "has_timer",
        "method_name": "has_timer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if SplashKit is aware of the given timer.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "t": {
            "type": "timer",
            "description": "Checks if SplashKit is aware of the given timer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timers",
          "method": "has_timer"
        }
      },
      {
        "signature": "void pause_timer(string name);",
        "name": "pause_timer",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void pause_timer(timer to_pause);",
        "name": "pause_timer",
        "method_name": "pause",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "to_pause": {
            "type": "timer",
            "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "method": "pause"
        }
      },
      {
        "signature": "void reset_timer(string name);",
        "name": "reset_timer",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resets the named timer",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Resets the named timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void reset_timer(timer tmr);",
        "name": "reset_timer",
        "method_name": "reset",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resets the time of a given timer",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "tmr": {
            "type": "timer",
            "description": "Resets the time of a given timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "method": "reset"
        }
      },
      {
        "signature": "void resume_timer(string name);",
        "name": "resume_timer",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resumes the named timer.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Resumes the named timer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void resume_timer(timer to_resume);",
        "name": "resume_timer",
        "method_name": "resume",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resumes a paused timer.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "to_resume": {
            "type": "timer",
            "description": "Resumes a paused timer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "method": "resume"
        }
      },
      {
        "signature": "void start_timer(string name);",
        "name": "start_timer",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void start_timer(timer to_start);",
        "name": "start_timer",
        "method_name": "start",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "to_start": {
            "type": "timer",
            "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "method": "start"
        }
      },
      {
        "signature": "void stop_timer(string name);",
        "name": "stop_timer",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "void stop_timer(timer to_stop);",
        "name": "stop_timer",
        "method_name": "stop",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "to_stop": {
            "type": "timer",
            "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "method": "stop"
        }
      },
      {
        "signature": "timer timer_named(string name);",
        "name": "timer_named",
        "method_name": "get_timer_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get the timer created with the indicated name.",
        "brief": null,
        "return": {
          "type": "timer",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Get the timer created with the indicated name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timers",
          "method": "get_timer_named"
        }
      },
      {
        "signature": "bool timer_paused(string name);",
        "name": "timer_paused",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is paused.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Indicates if the timer is paused.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool timer_paused(timer to_get);",
        "name": "timer_paused",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is paused.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "to_get": {
            "type": "timer",
            "description": "Indicates if the timer is paused.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "getter": "is_paused"
        }
      },
      {
        "signature": "bool timer_started(string name);",
        "name": "timer_started",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is started.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Indicates if the timer is started.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool timer_started(timer to_get);",
        "name": "timer_started",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is started.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "to_get": {
            "type": "timer",
            "description": "Indicates if the timer is started.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "getter": "is_started"
        }
      },
      {
        "signature": "unsigned int timer_ticks(string name);",
        "name": "timer_ticks",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "unsigned int timer_ticks(timer to_get);",
        "name": "timer_ticks",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "to_get": {
            "type": "timer",
            "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "timer",
          "getter": "ticks"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _timer_data *timer;",
        "name": "timer",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "Timer"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "triangle_drawing": {
    "name": "triangle_drawing",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "triangle_geometry": {
    "name": "triangle_geometry",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "types": {
    "name": "types",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [
      {
        "signature": "typedef struct _animation_data *animation;",
        "name": "animation",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "animation"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct _animation_script_data *animation_script;",
        "name": "animation_script",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "animation_script"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct _bitmap_data *bitmap;",
        "name": "bitmap",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "bitmap"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_display *display;",
        "name": "display",
        "description": "Each display value represents a physical display attached to the computer.\nYou can use this to query the displays position and size.",
        "brief": null,
        "attributes": {
          "class": "display"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_font_data *font;",
        "name": "font",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "font"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef void (free_notifier)(void *pointer);",
        "name": "free_notifier",
        "description": "The free notifier can be registered with the system. It is called every\ntime a resource is freed.",
        "brief": null,
        "attributes": {
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pointer": {
            "type": "void",
            "description": "The free notifier can be registered with the system. It is called every\ntime a resource is freed.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        }
      }
    ],
    "structs": [
      {
        "signature": "struct circle {point_2d center;float radius;};",
        "name": "circle",
        "description": null,
        "brief": null,
        "fields": {
          "center": {
            "type": "point_2d",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "radius": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "struct color {float r, g, b, a;};",
        "name": "color",
        "description": "color",
        "brief": null,
        "fields": {
          "r": {
            "type": "float",
            "description": "color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "g": {
            "type": "float",
            "description": "color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "b": {
            "type": "float",
            "description": "color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "a": {
            "type": "float",
            "description": "color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "struct drawing_options {void *dest; // The bitmap or window used to draw on tofloat scale_x; // Scale datafloat scale_y; //float angle; // Angle for rotationsfloat anchor_offset_x; // Centre point for rotationsfloat anchor_offset_y; //bool flip_x; // Flip databool flip_y; //bool is_part; // Draw just a part?rectangle part; // Part to drawdrawing_dest camera; // Draw to world or screen coordinates (camera has effect?)int line_width; // Specify the width of line drawings.animation anim; // The animation for bitmap drawing};",
        "name": "drawing_options",
        "description": null,
        "brief": null,
        "fields": {
          "dest": {
            "type": "void",
            "description": null,
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "scale_x": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "scale_y": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "angle": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "anchor_offset_x": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "anchor_offset_y": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "flip_x": {
            "type": "bool",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "flip_y": {
            "type": "bool",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "is_part": {
            "type": "bool",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "part": {
            "type": "rectangle",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "camera": {
            "type": "drawing_dest",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "line_width": {
            "type": "int",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "anim": {
            "type": "animation",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "struct line {point_2d start_point;point_2d end_point;};",
        "name": "line",
        "description": "A line goes from a start point to an end point.",
        "brief": null,
        "fields": {
          "start_point": {
            "type": "point_2d",
            "description": "A line goes from a start point to an end point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "end_point": {
            "type": "point_2d",
            "description": "A line goes from a start point to an end point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "struct point_2d {float x, y;};",
        "name": "point_2d",
        "description": "A Point2D represents an location in Cartesian coordinates (x,y).\nThe x value represents the distance from the left edge of the window or bitmap, increasing\nin value as you travel right. The y value represents the distance from the top\nedge of the window or bitmap, and increases as you travel down toward the bottom.\n\nPoint2D is a great way to keep track of the location of something in a 2D space like\na Window or Bitmap.",
        "brief": null,
        "fields": {
          "x": {
            "type": "float",
            "description": "A Point2D represents an location in Cartesian coordinates (x,y).\nThe x value represents the distance from the left edge of the window or bitmap, increasing\nin value as you travel right. The y value represents the distance from the top\nedge of the window or bitmap, and increases as you travel down toward the bottom.\n\nPoint2D is a great way to keep track of the location of something in a 2D space like\na Window or Bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "A Point2D represents an location in Cartesian coordinates (x,y).\nThe x value represents the distance from the left edge of the window or bitmap, increasing\nin value as you travel right. The y value represents the distance from the top\nedge of the window or bitmap, and increases as you travel down toward the bottom.\n\nPoint2D is a great way to keep track of the location of something in a 2D space like\na Window or Bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "struct quad {point_2d points[4];};",
        "name": "quad",
        "description": null,
        "brief": null,
        "fields": {
          "points": {
            "type": "point_2d",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": true,
            "array_dimension_sizes": [
              4
            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "struct rectangle {float x, y;float width, height;};",
        "name": "rectangle",
        "description": null,
        "brief": null,
        "fields": {
          "x": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "width": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "height": {
            "type": "float",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "struct triangle {point_2d points[3];};",
        "name": "triangle",
        "description": "A triangle consists of three points",
        "brief": null,
        "fields": {
          "points": {
            "type": "point_2d",
            "description": "A triangle consists of three points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": true,
            "array_dimension_sizes": [
              3
            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "struct vector_2d {double x;double y;};",
        "name": "vector_2d",
        "description": null,
        "brief": null,
        "fields": {
          "x": {
            "type": "double",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "double",
            "description": null,
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "enums": [
      {
        "signature": "enum drawing_dest {DRAW_TO_SCREEN, // no camera effectDRAW_TO_WORLD, // camera effectDRAW_DEFAULT // camera effect on screen, but not on bitmaps};",
        "name": "drawing_dest",
        "description": null,
        "brief": null,
        "constants": {
          "DRAW_TO_SCREEN": {
          },
          "DRAW_TO_WORLD": {
          },
          "DRAW_DEFAULT": {
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "enum font_alignment {ALIGN_LEFT = 1,ALIGN_CENTER = 2,ALIGN_RIGHT = 4};",
        "name": "font_alignment",
        "description": null,
        "brief": null,
        "constants": {
          "ALIGN_LEFT": {
            "number": 1
          },
          "ALIGN_CENTER": {
            "number": 2
          },
          "ALIGN_RIGHT": {
            "number": 4
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "enum font_style {NORMAL_FONT = 0,BOLD_FONT = 1,ITALIC_FONT = 2,UNDERLINE_FONT = 4};",
        "name": "font_style",
        "description": null,
        "brief": null,
        "constants": {
          "NORMAL_FONT": {
            "number": 0
          },
          "BOLD_FONT": {
            "number": 1
          },
          "ITALIC_FONT": {
            "number": 2
          },
          "UNDERLINE_FONT": {
            "number": 4
          }
        },
        "attributes": {
        }
      }
    ],
    "defines": [

    ]
  },
  "utils": {
    "name": "utils",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "vector_2d": {
    "name": "vector_2d",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "float dot_product(const vector_2d &v1,const vector_2d &v2);",
        "name": "dot_product",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the dot product (scalar product) between the two vector\nparameters provided (`v1` and `v2`). It returns the result as a\nscalar value.\n\nIf the result is 0.0 it means that the vectors are orthogonal (at right\nangles to each other). If `v1` and `v2` are unit vectors (length of\n1.0) and the dot product is 1.0, it means that `v1` and `v2` vectors\nare parallel.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "Calculates the dot product (scalar product) between the two vector\nparameters provided (`v1` and `v2`). It returns the result as a\nscalar value.\n\nIf the result is 0.0 it means that the vectors are orthogonal (at right\nangles to each other). If `v1` and `v2` are unit vectors (length of\n1.0) and the dot product is 1.0, it means that `v1` and `v2` vectors\nare parallel.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "v2": {
            "type": "vector_2d",
            "description": "Calculates the dot product (scalar product) between the two vector\nparameters provided (`v1` and `v2`). It returns the result as a\nscalar value.\n\nIf the result is 0.0 it means that the vectors are orthogonal (at right\nangles to each other). If `v1` and `v2` are unit vectors (length of\n1.0) and the dot product is 1.0, it means that `v1` and `v2` vectors\nare parallel.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool is_zero_vector(const vector_2d &v);",
        "name": "is_zero_vector",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns if the vector is a null/zero vector -- having no size or direction.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "Returns if the vector is a null/zero vector -- having no size or direction.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d unit_vector(const vector_2d &v);",
        "name": "unit_vector",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the unit vector of the parameter vector (v). The unit vector has a\nmagnitude of 1, resulting in a vector that indicates the direction of\nthe original vector.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "Returns the unit vector of the parameter vector (v). The unit vector has a\nmagnitude of 1, resulting in a vector that indicates the direction of\nthe original vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_add(const vector_2d &v1,const vector_2d &v2);",
        "name": "vector_add",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds the two passed in vectors returns the result as new `vector_2d`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "Adds the two passed in vectors returns the result as new `vector_2d`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "v2": {
            "type": "vector_2d",
            "description": "Adds the two passed in vectors returns the result as new `vector_2d`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "float vector_angle(const vector_2d v);",
        "name": "vector_angle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the angle of a vector.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "Calculates the angle of a vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_from_angle(float angle,float magnitude);",
        "name": "vector_from_angle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `vector_2d` from the supplied angle and distance.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "angle": {
            "type": "float",
            "description": "Returns a `vector_2d` from the supplied angle and distance.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "magnitude": {
            "type": "float",
            "description": "Returns a `vector_2d` from the supplied angle and distance.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_from_line(const line &l);",
        "name": "vector_from_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that points from the start to the end of a line.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "Returns a vector that points from the start to the end of a line.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_invert(const vector_2d &v);",
        "name": "vector_invert",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a new Vector that is an inverted version of the parameter\nvector (v). In other words, the -/+ sign of the x and y values are changed.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "Returns a new Vector that is an inverted version of the parameter\nvector (v). In other words, the -/+ sign of the x and y values are changed.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_limit(const vector_2d &v,float limit);",
        "name": "vector_limit",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a scaled vector that ensures the new vector points\nin the same direction as v, but has a magnitude that is\nlimited to the length specified in the limit prameter.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "Returns a scaled vector that ensures the new vector points\nin the same direction as v, but has a magnitude that is\nlimited to the length specified in the limit prameter.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "limit": {
            "type": "float",
            "description": "Returns a scaled vector that ensures the new vector points\nin the same direction as v, but has a magnitude that is\nlimited to the length specified in the limit prameter.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "float vector_magnitude(const vector_2d &v);",
        "name": "vector_magnitude",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the magnitude (or \"length\") of the vector.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "Returns the magnitude (or \"length\") of the vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "float vector_magnitude_sqared(const vector_2d &v);",
        "name": "vector_magnitude_sqared",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the squared magnitude (or \"length\") of the vector.",
        "brief": null,
        "return": {
          "type": "float",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "Returns the squared magnitude (or \"length\") of the vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_multiply(const vector_2d &v1,float s);",
        "name": "vector_multiply",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the vector by the passed in value.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "Multiplies the vector by the passed in value.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "s": {
            "type": "float",
            "description": "Multiplies the vector by the passed in value.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_normal(const vector_2d &v);",
        "name": "vector_normal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a new `vector_2d` that is perpendicular (\"normal\") to the parameter\nvector `v` provided. The concept of a \"normal\" vector is usually\nextracted from (or associated with) a line.\n\nNote: when passed a zero or null vector (a vector with no\nmagnitude or direction) then this function returns a zero/null vector.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "Returns a new `vector_2d` that is perpendicular (\"normal\") to the parameter\nvector `v` provided. The concept of a \"normal\" vector is usually\nextracted from (or associated with) a line.\n\nNote: when passed a zero or null vector (a vector with no\nmagnitude or direction) then this function returns a zero/null vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_out_of_circle_from_circle(const circle &src,const circle &bounds,const vector_2d &velocity);",
        "name": "vector_out_of_circle_from_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector to back one circle out of another, assuming the first circle was\nmoving at a specified velocity.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "src": {
            "type": "circle",
            "description": "Returns a vector to back one circle out of another, assuming the first circle was\nmoving at a specified velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "bounds": {
            "type": "circle",
            "description": "Returns a vector to back one circle out of another, assuming the first circle was\nmoving at a specified velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "velocity": {
            "type": "vector_2d",
            "description": "Returns a vector to back one circle out of another, assuming the first circle was\nmoving at a specified velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_out_of_circle_from_point(const point_2d &pt,const circle &c,const vector_2d &velocity);",
        "name": "vector_out_of_circle_from_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the vector out to move a point back out of a circle,\ngiven the point was moving at the specified velocity.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Returns the vector out to move a point back out of a circle,\ngiven the point was moving at the specified velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "c": {
            "type": "circle",
            "description": "Returns the vector out to move a point back out of a circle,\ngiven the point was moving at the specified velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "velocity": {
            "type": "vector_2d",
            "description": "Returns the vector out to move a point back out of a circle,\ngiven the point was moving at the specified velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_out_of_rect_from_circle(const circle &c,const rectangle &rect,const vector_2d &velocity);",
        "name": "vector_out_of_rect_from_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that can be used to move a circle back out of a rectangle,\ngiven that the circle is moving at the specified velocity.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "Returns a vector that can be used to move a circle back out of a rectangle,\ngiven that the circle is moving at the specified velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "rect": {
            "type": "rectangle",
            "description": "Returns a vector that can be used to move a circle back out of a rectangle,\ngiven that the circle is moving at the specified velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "velocity": {
            "type": "vector_2d",
            "description": "Returns a vector that can be used to move a circle back out of a rectangle,\ngiven that the circle is moving at the specified velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_out_of_rect_from_point(const point_2d &pt,const rectangle &rect,const vector_2d &velocity);",
        "name": "vector_out_of_rect_from_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines the vector needed to move back from point `pt` out of rectangle `rect` given\nthe point was moving at the velocity specified.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "Determines the vector needed to move back from point `pt` out of rectangle `rect` given\nthe point was moving at the velocity specified.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "rect": {
            "type": "rectangle",
            "description": "Determines the vector needed to move back from point `pt` out of rectangle `rect` given\nthe point was moving at the velocity specified.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "velocity": {
            "type": "vector_2d",
            "description": "Determines the vector needed to move back from point `pt` out of rectangle `rect` given\nthe point was moving at the velocity specified.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_out_of_rect_from_rect(const rectangle &src,const rectangle &bounds,const vector_2d &velocity);",
        "name": "vector_out_of_rect_from_rect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the vector needed to move rectangle `src` back out of rectangle `bounds`\nassuming the rectangle was moving at the velocity specified.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "src": {
            "type": "rectangle",
            "description": "Returns the vector needed to move rectangle `src` back out of rectangle `bounds`\nassuming the rectangle was moving at the velocity specified.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "bounds": {
            "type": "rectangle",
            "description": "Returns the vector needed to move rectangle `src` back out of rectangle `bounds`\nassuming the rectangle was moving at the velocity specified.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "velocity": {
            "type": "vector_2d",
            "description": "Returns the vector needed to move rectangle `src` back out of rectangle `bounds`\nassuming the rectangle was moving at the velocity specified.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_point_to_point(const point_2d &start,const point_2d &end);",
        "name": "vector_point_to_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `vector_2d` created from the difference from the `p1` to\nthe second `p2` points (`Point2D`).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "start": {
            "type": "point_2d",
            "description": "Returns a `vector_2d` created from the difference from the `p1` to\nthe second `p2` points (`Point2D`).",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "end": {
            "type": "point_2d",
            "description": "Returns a `vector_2d` created from the difference from the `p1` to\nthe second `p2` points (`Point2D`).",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_subtract(const vector_2d &v1,const vector_2d &v2);",
        "name": "vector_subtract",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Subtracts the second vector parameter (`v2`) from the first vector\n(`v1`) and returns the result as new `vector_2d`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "Subtracts the second vector parameter (`v2`) from the first vector\n(`v1`) and returns the result as new `vector_2d`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "v2": {
            "type": "vector_2d",
            "description": "Subtracts the second vector parameter (`v2`) from the first vector\n(`v1`) and returns the result as new `vector_2d`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_to(const point_2d &p1);",
        "name": "vector_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a new `vector_2d` using the x and y value of a `point_2d` parameter.\nThis is a vector from the origin to that point.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "p1": {
            "type": "point_2d",
            "description": "Returns a new `vector_2d` using the x and y value of a `point_2d` parameter.\nThis is a vector from the origin to that point.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "vector_2d vector_to(float x,float y);",
        "name": "vector_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector to the indicated point.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "Returns a vector to the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "y": {
            "type": "float",
            "description": "Returns a vector to the indicated point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "string vector_to_string(const vector_2d &v);",
        "name": "vector_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a text description of the `vector`.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "Get a text description of the `vector`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      },
      {
        "signature": "bool vectors_equal(const vector_2d &v1,const vector_2d v2);",
        "name": "vectors_equal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if two vectors are the same.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "Determines if two vectors are the same.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "v2": {
            "type": "vector_2d",
            "description": "Determines if two vectors are the same.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "web": {
    "name": "web",
    "brief": null,
    "description": null,
    "functions": [

    ],
    "typedefs": [
      {
        "signature": "typedef struct _http_request_data *http_request;",
        "name": "http_request",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "http_request"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct _http_response_data *http_response;",
        "name": "http_response",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "http_response"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "web_server": {
    "name": "web_server",
    "brief": null,
    "description": null,
    "functions": [
      {
        "signature": "bool has_waiting_requests(web_server server);",
        "name": "has_waiting_requests",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the given `web_sever` has pending requests.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `bool` denoting whether the `web_server` has pending requests."
        },
        "parameters": {
          "server": {
            "type": "web_server",
            "description": "Returns true if the given `web_sever` has pending requests.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "web_server",
          "self": "server",
          "static": "web_server"
        }
      },
      {
        "signature": "server_request next_web_request(web_server server);",
        "name": "next_web_request",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the next request on a given `web_server` instance",
        "brief": null,
        "return": {
          "type": "server_request",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the next request on the given `web_server` instance."
        },
        "parameters": {
          "server": {
            "type": "web_server",
            "description": "Returns the next request on a given `web_server` instance",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "web_server",
          "self": "server",
          "static": "web_server"
        }
      },
      {
        "signature": "string request_get_uri(server_request r);",
        "name": "request_get_uri",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Requests a URI from the web server.",
        "brief": null,
        "return": {
          "type": "string",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns the requested URI in the form of a string."
        },
        "parameters": {
          "r": {
            "type": "server_request",
            "description": "Requests a URI from the web server.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "web_server"
        }
      },
      {
        "signature": "void send_response(server_request r,string message);",
        "name": "send_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends a message to a given `server_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "r": {
            "type": "server_request",
            "description": "Sends a message to a given `server_request`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "message": {
            "type": "string",
            "description": "Sends a message to a given `server_request`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "server_response",
          "static": "web_server"
        }
      },
      {
        "signature": "void send_response(server_request r,server_response resp);",
        "name": "send_response",
        "method_name": null,
        "unique_global_name": "send_response_as_text",
        "unique_method_name": "_as_text",
        "suffix_name": null,
        "description": "Sends a message to a given `server_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "r": {
            "type": "server_request",
            "description": "Sends a message to a given `server_request`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "resp": {
            "type": "server_response",
            "description": "Sends a message to a given `server_request`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "server_request",
          "self": "r",
          "suffix": "as_text",
          "static": "web_server"
        }
      },
      {
        "signature": "void send_response(server_request r,string message,string content_type);",
        "name": "send_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends a message to a given `server_request` with the specified content type.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "r": {
            "type": "server_request",
            "description": "Sends a message to a given `server_request` with the specified content type.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "message": {
            "type": "string",
            "description": "Sends a message to a given `server_request` with the specified content type.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "content_type": {
            "type": "string",
            "description": "Sends a message to a given `server_request` with the specified content type.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "server_request",
          "self": "r",
          "static": "web_server"
        }
      },
      {
        "signature": "web_server start_web_server();",
        "name": "start_web_server",
        "method_name": "start",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a new web server instance and starts it.",
        "brief": null,
        "return": {
          "type": "web_server",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a new `web_sever` instance."
        },
        "parameters": {
        },
        "attributes": {
          "class": "web_server",
          "constructor": true,
          "method": "start",
          "static": "web_server"
        }
      },
      {
        "signature": "web_server start_web_server(string port);",
        "name": "start_web_server",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the web server on a given port number.",
        "brief": null,
        "return": {
          "type": "web_server",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a new `web_server` instance."
        },
        "parameters": {
          "port": {
            "type": "string",
            "description": "Starts the web server on a given port number.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "web_server",
          "constructor": true,
          "static": "web_server"
        }
      },
      {
        "signature": "void stop_web_server(web_server server);",
        "name": "stop_web_server",
        "method_name": "stop",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops a given `web_server` instance.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "server": {
            "type": "web_server",
            "description": "Stops a given `web_server` instance.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "web_server",
          "destructor": true,
          "method": "stop",
          "self": "server",
          "static": "web_server"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct sk_server_request *server_request;",
        "name": "server_request",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "server_request",
          "static": "web_server"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_server_response *server_response;",
        "name": "server_response",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "server_response",
          "static": "web_server"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_web_server *web_server;",
        "name": "web_server",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "web_server",
          "static": "web_server"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "window_manager": {
    "name": "window_manager",
    "brief": "Window Manager in SplashKit can be used create, and manipulate\ngraphics windows",
    "description": null,
    "functions": [
      {
        "signature": "void clear_window(window wind,color clr);",
        "name": "clear_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "clears a window to the specified color given in `clr`",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "clears a window to the specified color given in `clr`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "clr": {
            "type": "color",
            "description": "clears a window to the specified color given in `clr`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "self": "wind",
          "static": "window_manager"
        }
      },
      {
        "signature": "void close_all_windows();",
        "name": "close_all_windows",
        "method_name": "free_all_window",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the windows which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "window",
          "method": "free_all_window",
          "static": "window_manager"
        }
      },
      {
        "signature": "void close_window(const string &name);",
        "name": "close_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes and frees the graphics window identified by `name`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Closes and frees the graphics window identified by `name`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "destructor": true,
          "static": "window_manager"
        }
      },
      {
        "signature": "void close_window(window wind);",
        "name": "close_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes and frees the graphics window supplied in `wind`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "Closes and frees the graphics window supplied in `wind`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "destructor": true,
          "self": "wind",
          "static": "window_manager"
        }
      },
      {
        "signature": "bool has_window(string caption);",
        "name": "has_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a window loaded with the supplied name.\nThis checks against all windows loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_window` to load in a specific window and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns `true` if there is a window with the given `caption`\nwhich has has been loaded."
        },
        "parameters": {
          "caption": {
            "type": "string",
            "description": "Determines if SplashKit has a window loaded with the supplied name.\nThis checks against all windows loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_window` to load in a specific window and give\nit the desired name.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "window_manager"
        }
      },
      {
        "signature": "window open_window(string caption,int width,int height);",
        "name": "open_window",
        "method_name": "open_window",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Opens a new graphics window. The supplied `caption` is used to\nname and identify the window. The supplied `width` and `height` indicate\nthe size of the window. The window can be retrieved by passing `caption`\nto the `window_named` function.",
        "brief": null,
        "return": {
          "type": "window",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "caption": {
            "type": "string",
            "description": "Opens a new graphics window. The supplied `caption` is used to\nname and identify the window. The supplied `width` and `height` indicate\nthe size of the window. The window can be retrieved by passing `caption`\nto the `window_named` function.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "width": {
            "type": "int",
            "description": "Opens a new graphics window. The supplied `caption` is used to\nname and identify the window. The supplied `width` and `height` indicate\nthe size of the window. The window can be retrieved by passing `caption`\nto the `window_named` function.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          },
          "height": {
            "type": "int",
            "description": "Opens a new graphics window. The supplied `caption` is used to\nname and identify the window. The supplied `width` and `height` indicate\nthe size of the window. The window can be retrieved by passing `caption`\nto the `window_named` function.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "constructor": true,
          "method": "open_window",
          "static": "window_manager"
        }
      },
      {
        "signature": "void refresh_window(window wind);",
        "name": "refresh_window",
        "method_name": "refresh",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Refreshes the window `wind`.",
        "brief": null,
        "return": {
          "type": "void",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "Refreshes the window `wind`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "method": "refresh",
          "self": "wind",
          "static": "window_manager"
        }
      },
      {
        "signature": "bool window_close_requested(const string &name);",
        "name": "window_close_requested",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks all opened windows in the current program\nto determin if a window with the name `name` is\ncurrently open, and will close a window if one is found.",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns `true` if there is a music file with the given `name` has\nhas been loaded."
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Checks all opened windows in the current program\nto determin if a window with the name `name` is\ncurrently open, and will close a window if one is found.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "static": "window_manager"
        }
      },
      {
        "signature": "bool window_close_requested(window wind);",
        "name": "window_close_requested",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes the window given in `wind`",
        "brief": null,
        "return": {
          "type": "bool",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns `true` if the window is closed,\n`false` if there is an error."
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "Closes the window given in `wind`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "self": "wind",
          "static": "window_manager"
        }
      },
      {
        "signature": "int window_height(const string &name);",
        "name": "window_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the window with the indicated name in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Returns the height of the window with the indicated name in pixels.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "getter": "height",
          "static": "window_manager"
        }
      },
      {
        "signature": "int window_height(window wind);",
        "name": "window_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the window in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "Returns the height of the window in pixels.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "getter": "height",
          "static": "window_manager"
        }
      },
      {
        "signature": "window window_named(string caption);",
        "name": "window_named",
        "method_name": "window_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an opened `window` with the given name `caption`, if a window with\nname `caption` is found.",
        "brief": null,
        "return": {
          "type": "window",
          "is_pointer": false,
          "is_reference": false,
          "description": "Returns a `window` with the name specified by `caption`"
        },
        "parameters": {
          "caption": {
            "type": "string",
            "description": "Returns an opened `window` with the given name `caption`, if a window with\nname `caption` is found.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "method": "window_named",
          "static": "window_manager"
        }
      },
      {
        "signature": "int window_width(const string &name);",
        "name": "window_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the window with the indicated name in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Returns the width of the window with the indicated name in pixels.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "getter": "width",
          "static": "window_manager"
        }
      },
      {
        "signature": "int window_width(window wind);",
        "name": "window_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the window in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "is_pointer": false,
          "is_reference": false,
          "description": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "Returns the width of the window in pixels.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ]
          }
        },
        "attributes": {
          "class": "window",
          "getter": "width",
          "static": "window_manager"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _window_data *window;",
        "name": "window",
        "description": "The Window type is used to refer to a window that you have opened\nin SplashKit. You create new Windows using `OpenWindow` and they can\nbe closed using `CloseWindow`.\n\n- opened with `open_window`\n\n- and must be released using `close_window` (to close a specific\nwindow) or `delete_all_windows` (to close all loaded\nwindows).",
        "brief": null,
        "attributes": {
          "class": "window",
          "static": "window_manager"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  }
}
